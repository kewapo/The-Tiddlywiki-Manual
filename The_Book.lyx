#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options false
\begin_modules
customHeadersFooters
tcolorbox
\end_modules
\maintain_unincluded_children false
\language english
\language_package babel
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format pdf2
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "The Tiddlywiki manual"
\pdf_author "Luis Javier González Caballero"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, urlcolor=blue, citecolor=blue"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\notefontcolor #0000ff
\index Índice
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\listings_params "showtabs={true;}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Itemize
Change the list field explanation to the tag section
\end_layout

\begin_layout Itemize
CSS mindmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename cover page.pdf

\end_inset


\end_layout

\begin_layout Title
Tiddlywiki
\end_layout

\begin_layout Title
Advanced Customization
\end_layout

\begin_layout Author
Luis Javier González Caballero
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Acknowledgements
\end_layout

\begin_layout Standard
This book would not have been possible without the help of people from the
 
\begin_inset CommandInset href
LatexCommand href
name "tiddlywiki google group"
target "https://groups.google.com/forum/#!forum/tiddlywiki"
literal "false"

\end_inset

.
 Special thanks to:
\end_layout

\begin_layout Itemize
Ton Gerner for his help with css classes.
\end_layout

\begin_layout Itemize
Riz for his help with templates.
\end_layout

\begin_layout Itemize
Mohammad Rahmani for his wonderful wikis and plugins.
\end_layout

\begin_layout Itemize
Chris Hunt for his 
\begin_inset CommandInset href
LatexCommand href
name "Tiddlywiki coding notes"
target "https://web.archive.org/web/20190413130519/http://cjhunt.github.io/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename Tiddlywiki_map.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Mastering Tiddlywiki is a hard a long trip.
 Why? you can ask yourserf.
 I answer you.
 Tiddlywiki is a confluence of many technologies:
\end_layout

\begin_layout Enumerate
The first step is understanding Wikitext.
 It is a markup language like Markdonw: it specify code characters for the
 format.
\end_layout

\begin_layout Enumerate
You need some understanding of HTML.
 At the bottom, Tiddlywiki is a HTML file with Javascirpt code.
\end_layout

\begin_layout Enumerate
Tiddlywiki uses CSS too.
 CSS is a technology that goes hand in hand with HTML.
\end_layout

\begin_layout Enumerate
If you want to program you own widgets you need Javascript.
\end_layout

\begin_layout Enumerate
Although you can use tw as a single file, you can have a self-hosted wiki
 installing node.js and tiddlywiki from its repository.
\end_layout

\begin_layout Standard
But f you want to be a Tiddlywiki master, the first of all is to understand
 the underlying of Tiddliwiki.
 This is where this book is going to help you.
\end_layout

\begin_layout Standard
Before reading this publication download an empty copy of Tiddlywiki and
 try the different features it allows.
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
Tiddlywiki is more than a note-taking application.
\end_layout

\begin_layout Itemize

\size footnotesize
It is an advanced way of organizing your information.
\end_layout

\begin_layout Itemize

\size footnotesize
All notes you will add to it are called tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
You can download an empty wiki from its web site.
\end_layout

\begin_layout Itemize

\size footnotesize
It is portable and multi platform.
\end_layout

\begin_layout Itemize

\size footnotesize
To add format to your text inside the tiddlers you use format characters:
 //text// for italics, __text__ for underline, [[Tiddler]] for links etc.
 This is called Wikitext.
\end_layout

\begin_layout Itemize

\size footnotesize
It use tags to organize, classify etc the tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
It use fields to add extra information to the tiddlers.
 For example the created date field, the modified date field etc.
\end_layout

\begin_layout Itemize

\size footnotesize
You can include the information of a tiddler inside other tiddler without
 writing twice.
 This is called Transclusion.
\end_layout

\begin_layout Itemize

\size footnotesize
You can use templates to personalize the way that tiddlywiki shows the tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
Tiddlywiki uses Filters to get a group of tiddlers.
 Filters are written in a little language inside tiddlywiki.
 For example, to get all tiddlers tagged with the
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

 tag you write {{{ [tag[Person]] }}}.
\end_layout

\begin_layout Itemize

\size footnotesize
You can add code to your wiki in Macros and Widgets.
 This is used to personalize the wiki.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
What is tiddlywiki
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement bh
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:What-is-Tiddlywiki"

\end_inset

What is Tiddlywiki
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/TW concept.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In this section we will talk about:
\end_layout

\begin_layout Itemize
TW description.
\end_layout

\begin_layout Itemize
TW philosophy.
\end_layout

\begin_layout Itemize
TW as a single page application.
\end_layout

\begin_layout Itemize
What are tiddlers.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TiddlyWiki is a personal and a non-linear notebook for organizing and sharing
 complex information.
 It is an open-source single page application wiki in the form of a single
 HTML file that includes all javascript code, the CSS format and the content.
 It is designed to be easy to customize and re-shape depending on application.
 It facilitates re-use of content by dividing it into small pieces called
 Tiddlers.
 It is not an application but a large html page that runs in almost all
 web browsers so it is very portable: you can use it in a USB stick, in
 a phone or tablet or as a web page in some internet servers.
 Tiddlywiki is made of tiddlers: little text areas or notes with a title
 and a content.
 You can add all the tiddlers you want and each of them will contain certain
 information.
\end_layout

\begin_layout Standard
It was created by the British software developer Jeremy Ruston in 2004.
 Tiddlywiki is free and open source software and is distributed under the
 terms of the BSD license.
\end_layout

\begin_layout Standard
Tiddlywiki introduces the concept of microcontent: the smallest structured
 and addressable piece of information, the smallest semantically meaningful
 units.
 This small piece of information is called tiddler.
 The purpose of this tiddlers is recording and organizing information is
 so that it can be used as many times as necessary.
\end_layout

\begin_layout Standard
You can find the basic information of Tiddlywiki in the web site: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tiddlywiki.com/
\end_layout

\end_inset

.
 I recommend you take a look.
\end_layout

\begin_layout Section
Starting with tiddlywiki
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In this section we will talk about:
\end_layout

\begin_layout Itemize
Where we can find tiddlywiki.
\end_layout

\begin_layout Itemize
How to download and a basic usage.
\end_layout

\begin_layout Itemize
Tagging tiddlers.
\end_layout

\begin_layout Itemize
Transclusion and filters.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GettingStarted"

\end_inset

The first run of Tiddlywiki
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/GettingStarted.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first step will be download an empty wiki page to our computer:
\end_layout

\begin_layout Enumerate
Go to 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tiddlywiki.com/
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Look for the tiddler
\begin_inset Quotes eld
\end_inset

GettingStarted
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Click on the red button,
\begin_inset Quotes eld
\end_inset

Download Empty
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Save the empty tiddlywiki in your computer.
\end_layout

\begin_layout Standard
Once you have the file you can open it with the browser (best with Firefox
 or Chrome).
 You will see the page of the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GettingStarted"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Assign a title and a subtitle to your wiki.
 You will notice that the tick icon above the subtitle change to red.
\end_layout

\begin_layout Standard
This shows us an important thing: as an html web page, the TW file can't
 save by itself.
 You musts save them by hand if you don't want to loose the data.
 Click in this red icon and save the file in the same location (maybe you
 have to configure your browser).
 The next time you open the empty wiki in the browser the title and subtitle
 will have changed.
 Other operations you can do is to create an initial tiddler and change
 the
\begin_inset Quotes eld
\end_inset

Default tiddlers
\begin_inset Quotes erd
\end_inset

 text area to the title of this first tiddler.
 To create tiddlers you will click on the "plus" icon under the subtitle.
\end_layout

\begin_layout Standard
The First Rule of using Tiddlywiki: backup your wiki file regularly retaining
 some backward copies.
\end_layout

\begin_layout Section
Reasons to use tiddlywiki
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In this section we will talk about:
\end_layout

\begin_layout Itemize
TW as a way of organizing notes.
\end_layout

\begin_layout Itemize
TW as a toolbox.
\end_layout

\begin_layout Itemize
Basic uses of TW.
\end_layout

\begin_layout Itemize
The TW community.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You have powerful reasons to use tiddlywiki:
\end_layout

\begin_layout Itemize
You can use them without installing any software.
\end_layout

\begin_layout Itemize
It is multiplaform: use your wiki in your tablet, mac, linux, windows or
 phone systems.
\end_layout

\begin_layout Itemize
It is portable: you can put in a USB stick, copy to your computer or upload
 to many internet servers.
\end_layout

\begin_layout Itemize
Its nonlinear approach allows you to use the information in new and helpfull
 ways.
\end_layout

\begin_layout Itemize
You can organize your information and knowledge your way.
\end_layout

\begin_layout Itemize
You can change the appearance and behavior of your wiki and adapt them to
 your preferences.
\end_layout

\begin_layout Itemize
Tiddlywiki promote information sharing.
\end_layout

\begin_layout Section
Elements of TW
\end_layout

\begin_layout Subsection
The screen
\end_layout

\begin_layout Standard
When you open a Tiddlywiki file you can see a left size with all open tiddlers
 and a right side with the title, buttons, and menus.
 In chapter 3 we will see the whole screen (look at the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-screen-Tiddlywiki"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Tiddlers
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-tiddler"

\end_inset

A tiddler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/A tiddler.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All notes you can add to Tiddlywiki are written in Tiddlers.
 It consist of a Title on the top, the tags and its content.
 A Tiddler is the basic element of Tiddliwiki.
 All things inside TW are made of tiddlers.
 The GettinStarted page you can see is a tiddler.
 The right menus too.
\end_layout

\begin_layout Standard
The most important thing in a tiddler is its title: this will be unique.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-tiddler"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you can see the first tiddler:
\end_layout

\begin_layout Itemize
Buttons to edit and close the tiddler.
\end_layout

\begin_layout Itemize
Title:
\begin_inset Quotes eld
\end_inset

My first tiddler
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
The field: created date.
\end_layout

\begin_layout Itemize
Tags: only one:
\begin_inset Quotes eld
\end_inset

this-is-a-tag
\begin_inset Quotes erd
\end_inset

.
 You can add as many tags as you want.
\end_layout

\begin_layout Itemize
Content:
\begin_inset Quotes eld
\end_inset

This is the content of the tiddler
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
When you click the
\begin_inset Quotes eld
\end_inset

pen
\begin_inset Quotes erd
\end_inset

 icon at the top you can see a tiddler in edition mode:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Creating-a-tiddler"

\end_inset

Creating a tiddler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/tiddler edition.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Buttons to delete, discard and save the tiddler
\end_layout

\begin_layout Itemize
Title at the top:
\begin_inset Quotes eld
\end_inset

New Tiddler
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Tag zone
\end_layout

\begin_layout Itemize
The format toolbar
\end_layout

\begin_layout Itemize
The content of the tiddler
\end_layout

\begin_layout Itemize
The type of the tiddler
\end_layout

\begin_layout Itemize
The fields zone.
 There are predefined fields but you can add your own fields.
\end_layout

\begin_layout Standard
If you close the tiddler it disappears from the screen.
 You can search it with the search bar, under the save button or choosing
 in the right menu More / All.
\end_layout

\begin_layout Subsection
The Story River
\end_layout

\begin_layout Standard
The left side of the Tiddlywiki is called the Story River and shows all
 open tiddlers.
\end_layout

\begin_layout Standard
A typical wiki contains hundreds or thousands of tiddlers, some of them
 open in the left side and others closed stored in the file.
 You can search the closed tiddlers with the search bar or with the menus.
\end_layout

\begin_layout Subsection
Tags
\end_layout

\begin_layout Standard
Tagging is a way of organizing tiddlers into categories.
 For example, if you had tiddlers representing various individuals, you
 could tag them as friend, family, colleague etc to indicate these people's
 relationships to you.
 By tagging your tiddlers, you can view, navigate and organize your information.
\end_layout

\begin_layout Standard
Tiddlywiki has a Tag manager.
 Open the tiddler $:/TagManager.
 With this tiddler you can change the color and add an icon for the tag
 .
\end_layout

\begin_layout Subsection
Fields
\end_layout

\begin_layout Standard
A tiddler has field.
 There are system field like the created and modified date but you can add
 your own ones.
\end_layout

\begin_layout Subsection
Text format
\end_layout

\begin_layout Standard
The formatted text inside a tiddlerr is called 
\begin_inset Quotes eld
\end_inset

Wikitext
\begin_inset Quotes erd
\end_inset

.
 The best way of learing Wikitext is playing with the toolbar above the
 tiddler in edition mode.
 For example, if you want some words to be italiced and click in the italic
 icon of the tool bar while editing a tiddler, Tiddlywiki will add two slashes
 around the words:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

//some words//
\end_layout

\end_inset

.
 WikiText is a concise, expressive way of typing a wide range of text formatting
, hypertext and interactive features.
 It allows you to focus on writing without a complex user interface getting
 in the way.
 It is designed to be familiar for users of MarkDown, but with more of a
 focus on linking and the interactive features.
\end_layout

\begin_layout Standard
Other example: you can make a link of a tiddler inside other tiddler writting
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

[[Tiddler Title Linked]]
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Transclusion
\end_layout

\begin_layout Standard
Transclusion is the process of referencing one tiddler "A" from another
 tiddler "B" such that the content of "A" appears to be a part of "B".
 It avoid Avoid having duplicate information.
\end_layout

\begin_layout Itemize
To show the information of a tiddler inside other, write
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

{{Tiddler Title}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
To show the content of a field write
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

{{Tiddler Tittle!!field name}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
to show the content of a field in the same tiddler write:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

{{!!field name}}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Templates
\end_layout

\begin_layout Standard
Is a role a tiddler can have.
 Is like a shape for other tiddlers.
 It tells other tiddlers the way they have to display: how to show the title,
 the tags, its content and the other tiddlers.
 When you download an empty tiddler the initial template for all tiddlers
 is:
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/ViewTemplate
\end_layout

\end_inset

 if the tiddler is in view mode (you are not editing it)
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/EditTemplate
\end_layout

\end_inset

 if you are editing the tiddler.
\end_layout

\begin_layout Standard
They (View and Edit templates) are tiddlers.
 You can search them in the advanced search and look for its content.
 And you can add your own templates.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Filters"

\end_inset

Filters
\end_layout

\begin_layout Standard
You can think of TiddlyWiki as a database in which the records are tiddlers.
 A database typically provides a way of discovering which records match
 a given pattern, and in TiddlyWiki this is done with filters.
\end_layout

\begin_layout Standard
A filter is a concise notation for selecting a particular set of tiddlers.
 For example, to show the titles of all tiddlers tagged with the
\begin_inset Quotes eld
\end_inset

learn
\begin_inset Quotes erd
\end_inset

 tag we can write
\begin_inset listings
lstparams "language=HTML"
inline true
status open

\begin_layout Plain Layout

{{{ [tag[learn]] }}}
\end_layout

\end_inset

.
 The
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

[tag[learn]]
\end_layout

\end_inset

 item is the filter and the brackets the way to add the links.
\end_layout

\begin_layout Subsection
Macros and widgets
\end_layout

\begin_layout Standard
Tiddlywiki is highly customizable.
 It use macros and widgets to personalize its appearance.
\end_layout

\begin_layout Standard
A macro is a named snippet of text.
 When you use it, Tiddlywiki shows its content.
\end_layout

\begin_layout Standard
A widget is a piece of code to perform some actions.
\end_layout

\begin_layout Subsection
Mechanism
\end_layout

\begin_layout Standard
All elements of tiddlywiki fit together through mechanism.
 For example, the HistoryMechanism keeps track of a list of tiddlers comprising
 the navigation history.
 The StartupMechanism runs the installed startup modules at the end of the
 boot process.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Lists"

\end_inset

Lists
\end_layout

\begin_layout Standard
When you look some information inside Tiddlywiki it gives you a list of
 tiddlers, so the manage of list is an important question in Tiddlywiki.
\end_layout

\begin_layout Standard
The more simplest is a tiddler list.
 This is a list with a few number of tiddlers.
 For example:
\end_layout

\begin_layout Standard

\series bold
[[First Tiddler]] SecondTiddler [[Third tiddler]] Finaltiddler
\end_layout

\begin_layout Standard
is a list with 4 tiddlers.
 You can see tiddlers inside [[ ]] and other tiddlers not.
 If your tiddler contains spaces you have to surround with [[ ]].
\end_layout

\begin_layout Standard
You can construct a list with filters.
 For example if you find this code in a tiddler:
\end_layout

\begin_layout Standard

\series bold
<$list filter="[tag[$:/tags/PageTemplate]]">
\end_layout

\begin_layout Standard
this means a list with all tiddlers tagged with the $:/tags/PageTemplate
 tag.
\end_layout

\begin_layout Standard
The most important thing here is the order of the tiddlers inside the list.
 In the first example the order is clear but in the second is not.
 Tiddlywiki will order the list alphabetically.
 But, imagine you need other order in this $list inside your tiddler.
 In this case you can include this order in the
\begin_inset Quotes eld
\end_inset

list
\begin_inset Quotes erd
\end_inset

 field of the tiddler.
 Tiddlywiki will respect that order.
\end_layout

\begin_layout Chapter
Using tiddlywiki
\end_layout

\begin_layout Section
The philosophy of Tiddlywiki
\end_layout

\begin_layout Standard
The purpose of recording and organizing information is so that it can be
 used again.
 The value of recorded information is directly proportional to the ease
 with which it can be re-used.
\end_layout

\begin_layout Standard
The philosophy of tiddlers is that we maximize the possibilities for re-use
 by slicing information up into the smallest semantically meaningful units
 with rich modeling of relationships between them.
 Then we use aggregation and composition to weave the fragments together
 to present narrative stories.
\end_layout

\begin_layout Standard
TiddlyWiki aspires to provide an algebra for tiddlers, a concise way of
 expressing and exploring the relationships between items of information.
\end_layout

\begin_layout Standard
TiddlyWiki let you to keep all your things in a non-linear notebook.
 Divide the complex notes in simple contents and store each of them in a
 single tiddler.
 We called each of this simple contents 
\begin_inset Quotes eld
\end_inset

microcontent
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Tiddlers are the fundamental units of information in TiddlyWiki.
 Tiddlers work best when they are 
\series bold
as small as possible
\series default
 so that they can be reused by weaving them together in different ways.
\end_layout

\begin_layout Standard
TiddlyWiki gives you different ways to structuring this microcontent:
\end_layout

\begin_layout Itemize
Format the tiddler content with Wikitext.
\end_layout

\begin_layout Itemize
Use tags to group tiddlers.
\end_layout

\begin_layout Itemize
Use fields to store simple tiddler data.
\end_layout

\begin_layout Itemize
Include the content of a tiddler inside other tiddler.
\end_layout

\begin_layout Itemize
Link your tiddlers with Tiddler links.
\end_layout

\begin_layout Itemize
Add external links.
\end_layout

\begin_layout Itemize
Search information in your wiki with filters.
 This produce a list of tiddler titles.
\end_layout

\begin_layout Itemize
Customize this list of this filters with widgets and macros.
\end_layout

\begin_layout Itemize
Add simple data inside DataTiddlers.
\end_layout

\begin_layout Section
Planning your wiki
\end_layout

\begin_layout Section
Organizing microcontent with links
\end_layout

\begin_layout Section
Organizing tiddlers with tags
\end_layout

\begin_layout Section
Personalize behavior with macros and widgets
\end_layout

\begin_layout Section
Importing content
\end_layout

\begin_layout Standard
Open your favorite text editor and write this lines:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

title:$:/MyTags
\end_layout

\begin_layout Plain Layout

tags: one two [[number three]] four five six seven eight nine ten
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Save this file as Mytags.tid.
\end_layout

\begin_layout Standard
Now drag this file into your tiddlywiki file.
 You have a new tiddler, 
\begin_inset Quotes eld
\end_inset

$:/MyTags
\begin_inset Quotes erd
\end_inset

 tagged with all that tags.
 If you add a new tiddler all this tags are in the tags drop down field.
\end_layout

\begin_layout Standard
You can add in this way all fields you want: title, tags, text (the tiddler
 content) and your personal fields.
\end_layout

\begin_layout Chapter
Loading tiddlywiki in the browser
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
When the browser loads the Tiddlywiki file it runs its javascript code.
\end_layout

\begin_layout Itemize

\size footnotesize
The Bootprefix of the code loads the Microkernel.
\end_layout

\begin_layout Itemize

\size footnotesize
The Microkernel is the the only part of Tiddlywiki that is not managed by
 tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
The rest of the application is managed by modules stored in tiddlers as
 javascript code.
\end_layout

\begin_layout Itemize

\size footnotesize
A tiddler can contain many kinds of data: text, images, javascript code
 (modules), JSON data...
\end_layout

\begin_layout Itemize

\size footnotesize
A tiddler can have many roles: a plugin, data, formatting code...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset

Introduction
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Architecture-of-Tiddlywiki"

\end_inset

Architecture of Tiddlywiki
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Architecture.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you edit the empty.html wiki file you will see something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML,basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

<html>
\end_layout

\begin_layout Plain Layout

<head> ...
 </head>
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<div id=
\begin_inset Quotes erd
\end_inset

styleArea> css styles </div>
\end_layout

\begin_layout Plain Layout

<div id=
\begin_inset Quotes erd
\end_inset

storeArea
\begin_inset Quotes erd
\end_inset

> The tiddlers of the wiki </div>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<div id=
\begin_inset Quotes erd
\end_inset

bootKernelPrefix
\begin_inset Quotes erd
\end_inset

 ...
 type: application/javascript>
\end_layout

\begin_layout Plain Layout

<script>
\end_layout

\begin_layout Plain Layout

	var _bootprefix = (function($tw) {
\end_layout

\begin_layout Plain Layout

	"use strict";
\end_layout

\begin_layout Plain Layout

	$tw = $tw || Object.create(null);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

</script>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, at the bottom Tiddlywiki is a html page with a lot of javascript code
 inside it.
 When the browser loads this file, it runs the javascript code and the content
 of the page change.
 At the end of this chapter there is a diagram of the html code after the
 browser has loaded this file.
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
What happens when loading a tiddlylwiki file? In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architecture-of-Tiddlywiki"
plural "false"
caps "false"
noprefix "false"

\end_inset

 we see its architecture.
\end_layout

\begin_layout Enumerate
First of all the operating system loads the browser.
\end_layout

\begin_layout Enumerate
The browser loads the HTML page.
\end_layout

\begin_layout Enumerate
After some css styles and the store area we can see the javascript code.
 The browser runs this code.
\end_layout

\begin_layout Enumerate
It loads the bootprefix.
 The bootprefix is responsible for preparing the kernel to boot on different
 engines e.g.
 browsers and node.js.
\end_layout

\begin_layout Enumerate
The microkernel is the first thing to run, when the application is started
 and it puts some initial objects and functions into the application tree,
 which are needed to load and manage tiddlers.
 After the microkernel built this initial application tree, the remaining
 parts of the application can be loaded as module tiddlers.
\end_layout

\begin_layout Enumerate
The microkernel load the startup modules (startup tiddlers).
\end_layout

\begin_layout Enumerate
At the top we have all modules (tiddlers).
\end_layout

\begin_layout Enumerate
Loading startup tiddlers
\end_layout

\begin_layout Section
Tiddlers as Basic Coding Elements
\end_layout

\begin_layout Standard
Only a small part of the Tiddlywiki is not managed by tiddlers: the Microkernel.
 After the microkernel built this initial application tree, the remaining
 parts of the application can be loaded as module tiddlers.
\end_layout

\begin_layout Standard
A tiddler is the smallest unit of the TiddlyWiki system.
 It can contain any data like plain text, WikiText markup, JavaScript code
 (module tiddler), JSON structures (JSON structures might even contain additiona
l tiddlers.
 Plug-ins are implemented this way to pack multiple tiddlers in a single
 plug-in tiddler), images in SVG format or even binary images encoded with
 base64.
 Internally Tiddlers are immutable objects containing a bunch of key:value
 pairs called fields.
 The only required field of a tiddler is the title field.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-tiddler-type"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you can see all roles of a tiddler.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename Images/dom_graph.pdf

\end_inset


\end_layout

\begin_layout Chapter
Components of the tiddlywiki screen
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
Tiddlywiki page is divided in two main sides.
 The left is the Story River.
 The right, the sidebars
\end_layout

\begin_layout Itemize

\size footnotesize
In the left side appears the tiddlers you open.
\end_layout

\begin_layout Itemize

\size footnotesize
The right side shows the title, subtitle, buttons and the menus.
\end_layout

\begin_layout Itemize

\size footnotesize
All inside Tiddlywiki is made of tiddlers.
 A tiddler can have many roles: template, macro, widget, css formating code,
 etc.
 depending of its tag or content-type field.
\end_layout

\begin_layout Itemize

\size footnotesize
Tiddlywiki uses special tiddlers and special tags to configure its appearance.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
The TW whole screen
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-screen-Tiddlywiki"

\end_inset

The Tiddlywiki page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Screen Elements.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-screen-Tiddlywiki"
plural "false"
caps "false"
noprefix "false"

\end_inset

 we can see the Tiddlywiki elements.
 The most important things are the Story River on the left and the right
 elements: title, menus etc.
 The tiddlers that we open will appear in the navigation story on the left.
 With he right menus we can find all the tiddlers of the file.
\end_layout

\begin_layout Standard
These are the elements that we can see in the Tiddlywiki page.
 But in order to personalize our wiki we must go deeper.
 You have to know that all this elements are tiddlers: the title and subtitle
 of your Tiddlywiki are tiddlers.
 The right menus too.
 And the search text box is a tiddler too.
 Even the buttons are tiddlers.
 The top right and left bars, the Above story, the Below story, all are
 tiddlers,
\series bold
system
\series default
 and
\series bold
shadow
\series default
 tiddlers.
\end_layout

\begin_layout Standard
Inside Tiddlywiki, all is a tiddler.
 And you can search and open them.
 For example if you look for the Subtitle in the search bar in advanced
 mode (click in the Advanced search icon on the right of the search bar)
 you will find a tiddler called
\begin_inset listings
lstparams "language=HTML"
inline true
status open

\begin_layout Plain Layout

$:/SiteSubtitle
\end_layout

\end_inset

.
 Its a shadow tiddler.
 If you change its content, the Tiddlywiki subtitle will change.
 And if you look for the save button you will find the tiddler called
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/Buttons/save
\end_layout

\end_inset

 with the code of the button.
\end_layout

\begin_layout Subsection
The story river
\end_layout

\begin_layout Standard
This place of the Tiddlywiki page is where all tiddlers you will open appear.
 You can configure the way Tiddlywiki will open them in the configuration
 tiddler (click the gearwheel icon on the right).
 At first all tiddlers opens each under the other but you can configure
 it so that only the active tiddler appears.
\end_layout

\begin_layout Subsection
The right sidebars
\end_layout

\begin_layout Standard
The right place is where you can see the wiki title, subtitle, the page
 buttons, the search bar....
 and under them the sidebars (the menus).
\end_layout

\begin_layout Standard
You can see 4 tabs: Open for the open tiddlers, Recent for the tiddlers
 you have opened, Tools to customize and configure your wiki and More where
 you can find some utilities.
 Of course they are four tiddlers:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/SideBar/Open
\end_layout

\end_inset

,
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/SideBar/Recent
\end_layout

\end_inset

,
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/SideBar/Tools
\end_layout

\end_inset

 and
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/SideBar/More
\end_layout

\end_inset

.
 All of them has the tag:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/tags/SideBar
\end_layout

\end_inset

.
 So if you want to include your own tab create a tiddler and add to them
 this tag.
\end_layout

\begin_layout Standard
This is an important question about Tiddlywiki: The tiddlers that make up
 the screen are chosen with its tags.
 For example, above we have seen that if you put the tag
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/tags/SideBar
\end_layout

\end_inset

 to a tiddler it appears on the left side.
 There are many tags for all places of the screen.
 You can see then in Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tags-TW-places"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Section
Drawing its interface
\end_layout

\begin_layout Standard
We know all are tiddlers but how Tiddlywiki draws its interface? This is
 where templates come in action.
\end_layout

\begin_layout Standard
To tell tiddlywiki where to place all elements we have a template:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate
\end_layout

\end_inset

.
 Try this: Edit this tiddler an add at the bottom of all code a new line
 with the code: <hr><hr><hr>.
 Then click the save tiddler button and close it.
 Your can see tree lines below the story river.
\end_layout

\begin_layout Standard
Looking this template we can see that it draws this elements:
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate/topleftbar
\end_layout

\end_inset

.- The top left bar
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate/toprightbar
\end_layout

\end_inset

.- The top right bar
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate/sidebar
\end_layout

\end_inset

.- The right side: title, subtitle, menus...
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate/story
\end_layout

\end_inset

.- All open tiddlers: the Story River
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/core/ui/PageTemplate/alerts
\end_layout

\end_inset

.- Special tiddlers called alerts (tiddlers with the
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/tags/Alert
\end_layout

\end_inset

 tag)
\end_layout

\begin_layout Standard
All elements are tagged with
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/tags/PageTemplate
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The code of all this elements allows us to add additional elements very
 easily.
 We only have to create a new tiddler and tagged it with the correct tag.
 For example, if we want to show some information above the story river
 we create a tiddler with this information and add the tag
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

$:/tags/AboveStory
\end_layout

\end_inset

.
 The most important tags are in Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tags-TW-places"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tags-TW-places"

\end_inset

The tags of Tiddlywiki places
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Screen Tags.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
What's this? The light blue little squares shows the tiddlers containing
 the title, subtitle, buttons, search bars and tabs.
 And the orange bubbles show the tags.
 So, if you want to include:
\end_layout

\begin_layout Itemize
A top left bar: create a tiddler with the buttons and tagged it with $:/tags/Top
LeftBar.
\end_layout

\begin_layout Itemize
A top right bar: There is a tiddler with this tag: $:/tags/TopRightBar:
 the tiddler $:/core/ui/TopBar/menu.
 It is used to hide the right zone.
\end_layout

\begin_layout Itemize
Content above the story river: Add this content in a tiddler tagged $:/tags/Abov
eStory.
\end_layout

\begin_layout Itemize
Content below the story river Add this content in a tiddler tagged $:/tags/Below
Story.
\end_layout

\begin_layout Itemize
A new tab in the right menus: Add this content in a tiddler tagged $:/tags/SideB
ar.
\end_layout

\begin_layout Itemize
New content below the right menu: Add this content in a tiddler tagged $:/tags/S
ideBarSegment.
\end_layout

\begin_layout Chapter
Customize the TW screen
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
The PageTemplate is used to display the Tiddlywiki screen.
\end_layout

\begin_layout Itemize

\size footnotesize
It shows all tiddlers tagged with $:/tags/PageTemplate.
 Its order is in the list field of the tiddler with the same title, $:/tags/Page
Template.
\end_layout

\begin_layout Itemize

\size footnotesize
The ViewTemplate is used to display a tiddler in view mode.
\end_layout

\begin_layout Itemize

\size footnotesize
It shows all tiddlers tagged with $:/tags/ViewTemplate.
 Its order is in the list field of the tiddler with the same title, $:/tags/View
Template.
\end_layout

\begin_layout Itemize

\size footnotesize
The EditTemplate is used to display a tiddler when you are editing or creating.
\end_layout

\begin_layout Itemize

\size footnotesize
It shows all tiddlers tagged with $:/tags/EditTemplate.
 Its order is in the list field of the tiddler with the same title, $:/tags/Edit
Template.
\end_layout

\begin_layout Itemize

\size footnotesize
The text/css tiddlers tagged with $:/tags/Stylesheet are used to format
 the text of all Tiddlywiki elements.
\end_layout

\begin_layout Itemize

\size footnotesize
You can add more buttons adding the tiddler button with its code.
\end_layout

\begin_layout Itemize

\size footnotesize
You can create new keyboard shorcuts
\end_layout

\begin_layout Itemize

\size footnotesize
Creating a left menu is not complicated
\end_layout

\end_inset


\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
One major feature of TiddlyWiki that many new users are unaware of is the
 degree to which TiddlyWiki can be customized, just by adding or removing
 SystemTags in key shadow tiddlers or in your own custom tiddlers.
\end_layout

\begin_layout Itemize
You can add and remove default features in tiddlers in either viewing or
 editing mode (let's say you find the tiddler subtitle distracting, or you
 want to add yourself a reminder that you will see when you edit tiddlers)
\end_layout

\begin_layout Itemize
You can also add and remove default features from the general page layout
 (maybe you want to add a clock to the sidebar, or replace one of the page
 control buttons with your own)
\end_layout

\begin_layout Itemize
You can also rearrange the order in which these features are displayed (perhaps
 you would like tags above tiddler titles, or the subtitle of your TiddlyWiki
 below the page control buttons)
\end_layout

\begin_layout Standard
Once you know what you are doing, all of these things are actually pretty
 easy to do.
\end_layout

\begin_layout Standard
There are three main templates in tiddlywiki:
\end_layout

\begin_layout Itemize
PageTemplate
\end_layout

\begin_layout Itemize
ViewTemplate
\end_layout

\begin_layout Itemize
EditTemplate
\end_layout

\begin_layout Section
PageTemplate
\end_layout

\begin_layout Standard
The $:/core/ui/PageTemplate tiddler is the template that draws the whole
 screen of tiddlywiki.
 It has the tag.
 All tiddlers
\series bold
 inside
\series default
 this tiddler one are tagged with the $:/tags/PageTemplate tag.
\end_layout

\begin_layout Standard
What means
\begin_inset Quotes eld
\end_inset

inside
\begin_inset Quotes erd
\end_inset

 this tiddler? If you look at this tiddler you can see this code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline true
status open

\begin_layout Plain Layout

<$list filter="[all[shadows+tiddlers]tag[$:/tags/PageTemplate]!has[draft.of]]"
 variable="listItem">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<$transclude tiddler=<<listItem>>/>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a list who transcludes (shows) all tiddlers tagged whit the $:/tags/Page
Template tag.
 If you tag a new tiddler with that tag it will be included in the main
 wiki page.
 You can find the sort of all the elements tagged in the list field of the
 tiddler $:/tags/PageTemplate (the same title as the tag).
 You can show your tiddler at the top of the screen if you include it as
 the first element of the list field in that tiddler.
\end_layout

\begin_layout Standard
What about the appearance of all this elements? Each element in the page
 has one or more CSS classes styling it.
 The CSS classes associated with the major page template elements are:
\end_layout

\begin_layout Itemize
Top left bar: .tc-topbar .tc-topbar-left
\end_layout

\begin_layout Itemize
Top right bar: .tc-topbar .tc-topbar-right
\end_layout

\begin_layout Itemize
Sidebar: .tc-sidebar-scrollable
\end_layout

\begin_layout Itemize
Story river: .tc-story-river Alerts: .tc-alerts
\end_layout

\begin_layout Standard
If user wants to hide a particular element from being displayed, they can
 create a stylesheet tiddler and add the style display:none; to the correspondin
g class.
\end_layout

\begin_layout Standard
CSS offers far more styling options than changing the visibility of an element.
 A complete description of CSS and its application to the each element is
 out of scope of this reference material.
 User is directed to familiarize themselves with various CSS properties
 from third party sources.
 All major browsers provide the options to inspect a displayed element on
 html page and view the CSS properties attached to that element.
 You may find the way to do it on your browser's website or forums.
 display:none property merely hides the display of the html element.
 It will not stop the element from loading to the DOM structure.
 Widespread use of the same will be a inefficient usage of resources.
\end_layout

\begin_layout Section
ViewTemplate
\end_layout

\begin_layout Standard
This is the template Tiddlywiki uses to display a single tiddler when you
 are reading it.
 Its title is $:/core/ui/ViewTemplate.
 As in the PageTemplate, you can edit it and look at its code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$list filter="[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]]"
 variable="listItem">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<$transclude tiddler=<<listItem>>/>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It shows a list with all tiddlers tagged with the $:/tags/ViewTemplate tag
 sort with the list field of the tiddler $:/tags/ViewTemplate.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-list-field"

\end_inset

The list field of $:/tags/ViewTemplate
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Viewtemplate Sample.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We want to illustrate the power of this templates.
 In this section we will add a foot at all tiddlers with the date in which
 the tiddler was added to the wiki.
\end_layout

\begin_layout Standard
The steps are:
\end_layout

\begin_layout Itemize
Add a new tiddler with the title $:/foot
\end_layout

\begin_layout Itemize
Add this code to the tiddler:
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline false
status open

\begin_layout Plain Layout

<small>
\end_layout

\begin_layout Plain Layout

//(Added to the wiki: <$view field="created" format="date"  template="DDth
 MMM YYYY"/>)//
\end_layout

\begin_layout Plain Layout

</small>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Add the tag $:/tags/ViewTemplate to the template
\end_layout

\begin_layout Itemize
Open the tiddler $:/tags/ViewTemplate
\end_layout

\begin_layout Itemize
Add our tiddler, $:/foot at the end of the list field of that tiddler, $:/tags/V
iewTemplate (look at Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-list-field"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Itemize
Save the tidder.
\end_layout

\begin_layout Standard
You will see a foot in all tiddlers with the created date.
 In Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CSS-Example"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you will see the new tiddler appearance.
\end_layout

\begin_layout Section
EditTemplate
\end_layout

\begin_layout Standard
The $:/core/ui/EditTemplate tiddler is the tiddler Tiddlywiki uses to display
 a tiddler when you are editing or creating it.
 And inside this tiddler you find:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$list filter="[all[shadows+tiddlers]tag[$:/tags/EditTemplate]!has[draft.of]]"
 variable="listItem">
\end_layout

\begin_layout Plain Layout

<$set name="tv-config-toolbar-class" filter="[<tv-config-toolbar-class>]
 [<listItem>encodeuricomponent[]addprefix[tc-btn-]]">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<$transclude tiddler=<<listItem>>/>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</$set> </$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So it shows all tiddlers tagged with $:/tags/EditTemplate sorting with the
 list field of the tiddler with the same name as this tag.
\end_layout

\begin_layout Section
Formating with CSS
\end_layout

\begin_layout Standard
You know HTML uses CSS to format the text.
 With CSS you can add colors, change font size, add borders and many other
 things.
\end_layout

\begin_layout Standard
If you open the control panel and show the Appearance tab you will see two
 themes: Snow White and Vanilla.
 And in Pallete tab you can choose many color combinations.
 Tiddlywiki uses CSS to change this settings.
 For example, the Vanilla base configuration is in the tiddler $:/themes/tiddlyw
iki/vanilla/base.
 You can see that it is tagged with $:/tags/Stylesheet.
\end_layout

\begin_layout Standard
Inside we find the css configuration for many html tags:
\end_layout

\begin_layout Description
p: Paragraphs
\end_layout

\begin_layout Description
h1: Title 1
\end_layout

\begin_layout Description
h2: Title 2
\end_layout

\begin_layout Description
hr: Lines
\end_layout

\begin_layout Description
table,
\begin_inset space ~
\end_inset

td,
\begin_inset space ~
\end_inset

tr: Tables
\end_layout

\begin_layout Standard
If you read this tiddler you will find all css clases for this theme.
 At the end of this chapter, on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "pdf:css_classes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 we will see a map with many css standard classes.
 The best way of using this map is search the classes in it in the main
 css Tiddlywiki style sheet, $:/themes/tiddlywiki/vanilla/base.
 In this way you can see the values of the classe you are looking.
\end_layout

\begin_layout Standard
Other way of play with this classes is with the firefox inspector.
 With it you can dinamicaly change its values.
 In the next table we can see some properties of css classes.
\end_layout

\begin_layout Standard
\noindent
\align center

\size footnotesize
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Property
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Example
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
display
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
display: none
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hide the element
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
border
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
border: 2px dotted red
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Draw a border
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
border-radius
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
border-radius: 20px
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Rounded corners
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
color
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
color: red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Text color
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
background-color
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
background-color: lightgray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Background color
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-style
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-style: italic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
italic, normal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-weight: bold
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-size: 15pt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Font size
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-family
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
font-family: "Times New Roman", Times, serif;
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
column-count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
column-count: 3;
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Number of columns
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
text-align
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
text-align: right
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
left, right, center, justify
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
transform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
transform: rotate(20deg);
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
rotate, skewY, scaleY...
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CSS-Example"

\end_inset

CSS Example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Example css.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can add a custom stylesheet tiddler for our own wikis.
 Imagine you want the first word of all paragraphs bigger.
 These are the steps:
\end_layout

\begin_layout Itemize
Create a tiddler, $:/styles
\end_layout

\begin_layout Itemize
Add this content:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

p::first-letter {
\end_layout

\begin_layout Plain Layout

  font-size:20pt;
\end_layout

\begin_layout Plain Layout

  text-shadow: gray 0.2px 2px 3px;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Add the tag $:/tags/Stylesheet to our tiddler.
\end_layout

\begin_layout Itemize
If you want, you can add the Type, under the content: text/css (only for
 readability)
\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CSS-Example"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you see the style tiddler and the new appearance of the paragraphs.
\end_layout

\begin_layout Section
Create a loading message
\end_layout

\begin_layout Standard
If the Tiddlywiki is big the loading in the browser may be delayed.
 This is a way to show a little message while it is loading:
\end_layout

\begin_layout Itemize
Create a new tiddler.
 Its tittle is not important.
\end_layout

\begin_layout Itemize
Add the loading message in its content.
 For example, 
\begin_inset Quotes eld
\end_inset

The wiki is loading.
 Please, wait...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Add the tag $:/tags/RawMarkupWikified/TopBody
\end_layout

\begin_layout Itemize
Add the type text/vnd.tiddlywiki
\end_layout

\begin_layout Itemize
Save.
\end_layout

\begin_layout Section
Create a new button at the toolbars
\end_layout

\begin_layout Standard
You know there are three main toolbars:
\end_layout

\begin_layout Itemize
Page toolbar: buttons on the right side of TW.
\end_layout

\begin_layout Itemize
View toolbar: buttons at the top of all tiddler in view mode
\end_layout

\begin_layout Itemize
Edit toolbar: buttons at the top of the tiddler you are editing
\end_layout

\begin_layout Standard
You can see all buttons in this toolbars in the control panel, appearance,
 toolbars.
 In this section we will add a new button.
 The new button will appears in the toobars and you can show or hide it.
\end_layout

\begin_layout Subsection
How to do it
\end_layout

\begin_layout Itemize
First of all you have to search for an icon for the new button.
 You can search at 
\begin_inset CommandInset href
LatexCommand href
name "Flaticon"
target "https://www.flaticon.com/"
literal "false"

\end_inset

 or 
\begin_inset CommandInset href
LatexCommand href
name "Feather icons"
target "https://feathericons.com/"
literal "false"

\end_inset

 and import the file to our wiki.
 Change its size to 22px x 22px
\end_layout

\begin_layout Itemize
Create the tiddler button:
\end_layout

\begin_deeper
\begin_layout Itemize
Content: the code for the button.
\end_layout

\begin_deeper
\begin_layout Itemize
For example, to create a new kind of tittler.
 The tooltip appears if you leave the cursor over the button: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$button  tooltip="Create a new kind of tiddler" aria-label="Crete new kind
 of tiddler" class=<<tv-config-toolbar-class>>>
\end_layout

\begin_layout Plain Layout

{{icon tiddler}} 
\end_layout

\begin_layout Plain Layout

<$action-sendmessage $message="tm-new-tiddler"     
\end_layout

\begin_layout Plain Layout

    title="New kind of tiddler"     
\end_layout

\begin_layout Plain Layout

    text=<<content>>     
\end_layout

\begin_layout Plain Layout

    tags="kind-1"     
\end_layout

\begin_layout Plain Layout

    color=#ffff80 /> 
\end_layout

\begin_layout Plain Layout

</$button>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Caption: {{icon tiddler}} Text-button.
 To show the icon and the button text.
\end_layout

\begin_deeper
\begin_layout Itemize
Description: short description for the button.
\end_layout

\end_deeper
\begin_layout Itemize
Tags:
\end_layout

\begin_deeper
\begin_layout Itemize
$:/tags/PageControls for the Page toolbar
\end_layout

\begin_layout Itemize
$:/tags/ViewToolbar for the View toolbar
\end_layout

\begin_layout Itemize
$:/tags/EditToolbar for the Edit toolbar
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
If you want to change the possition of the button in the control panel add
 the tiddler to the list fields of the three tag tiddlers in the position
 you want:
\end_layout

\begin_deeper
\begin_layout Itemize
$:/tags/PageControls
\end_layout

\begin_layout Itemize
$:/tags/ViewToolbar
\end_layout

\begin_layout Itemize
$:/tags/EditToolbar
\end_layout

\end_deeper
\begin_layout Itemize
Save and reload the wiki
\end_layout

\begin_layout Itemize
Open the control panel, appearance, toolbars.
 The new button will appears in the three toolbars.
 You can show or hide it.
\end_layout

\begin_layout Section
Add a new global keyboard shortcut
\end_layout

\begin_layout Standard
In the control panel, keyboard shortcuts appears the shortcuts of your tiddler.
 In this section we learn how to create a new shortcut.
 Imagine you want to create a new shortcut, CTRL+ALT+P to open the tiddler
 Control panel
\end_layout

\begin_layout Subsection
How to do it
\end_layout

\begin_layout Itemize
Create a new tiddler.
 This new tiddler is only for information:
\end_layout

\begin_deeper
\begin_layout Itemize
Title: $:/config/ShortcutInfo/control-panel
\end_layout

\begin_layout Itemize
Text: ctrl-alt-P.
\end_layout

\end_deeper
\begin_layout Itemize
Go to the control panel.
\end_layout

\begin_deeper
\begin_layout Itemize
Look for the new entry, control-panel.
\end_layout

\begin_layout Itemize
Expand and click in the pen icon.
\end_layout

\begin_layout Itemize
In the text area type the keys CTRL+ALT+P
\end_layout

\end_deeper
\begin_layout Itemize
Create other tiddler:
\end_layout

\begin_deeper
\begin_layout Itemize
Title: $:/control-panel (for example.
 It can be other title)
\end_layout

\begin_layout Itemize
Text: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$navigator story="$:/StoryList" history="$:/HistoryList"> <$action-navigate
 $to="$:/ControlPanel"/> </$navigator>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Tag: $:/tags/KeyboardShortcut
\end_layout

\begin_layout Itemize
Add field key: ((control-panel)).
 This is very important.
 It associate this code with the first tiddler, the shortcut.
\end_layout

\end_deeper
\begin_layout Itemize
Save and reload the wiki.
\end_layout

\begin_layout Standard

\bar under
Notes
\bar default
:
\end_layout

\begin_layout Itemize
We have chosen the control-panel suffix.
\end_layout

\begin_layout Itemize
The tiddler title $:/config/ShortcutInfo/control-panel is formed by
\begin_inset Quotes eld
\end_inset

$:/config/ShortcutInfo/
\begin_inset Quotes erd
\end_inset

 + suffix
\end_layout

\begin_layout Itemize
We have chosen the tiddler title $:/control-panel.
\end_layout

\begin_layout Itemize
The linki between the code and the keys is made with the key field.
 It is formed by (( + suffix + ))
\end_layout

\begin_layout Itemize
The action-navigate has to be enclosed in the $navigator widget.
\end_layout

\begin_layout Section
Creating a left menu
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-left-menu"

\end_inset

A left menu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Left_Menu.png
	lyxscale 50
	scale 35

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this section we will create a simple left menu.The steps are:
\end_layout

\begin_layout Itemize
Configure the story river position.
\end_layout

\begin_layout Itemize
Create the tiddler menu.
\end_layout

\begin_layout Itemize
Create the styles for the left menu.
\end_layout

\begin_layout Itemize
Create the entries for the left menu
\end_layout

\begin_layout Subsection
Configure the story river position
\end_layout

\begin_layout Subsubsection*
The manual way
\end_layout

\begin_layout Standard
Go to the control panel, appearance, Theme Tweaks.
 Look for the Story left position and put a value of 230.
\end_layout

\begin_layout Subsubsection*
The styles
\end_layout

\begin_layout Standard
Tiddlywiki have some css classes to automatize this.
 For exampl,e you can add a stylesheet tiddler tagged with $:/tags/Stylesheet
 and add the code: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

html .tc-story-river {
\end_layout

\begin_layout Plain Layout

  left: 230px; 
\end_layout

\begin_layout Plain Layout

  width: 770px;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
But in this way the right menu hides under the story river.
 You can add :
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

.tc-sidebar-scrollable {
\end_layout

\begin_layout Plain Layout

left: 1000px;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
to improve the appearance.
\end_layout

\begin_layout Subsection
Create the tiddler menu
\end_layout

\begin_layout Standard
Create a new tiddler.
 For example, $:/LeftMenu and tag it with $:/tags/PageTemplate
\end_layout

\begin_layout Standard
Add this code
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<div class="tgc-leftmenu tc-table-of-contents">
\end_layout

\begin_layout Plain Layout

@@.tc-site-title
\end_layout

\begin_layout Plain Layout

Menu
\end_layout

\begin_layout Plain Layout

@@
\end_layout

\begin_layout Plain Layout

<$scrollable class='tgc-scrollable-menu'>
\end_layout

\begin_layout Plain Layout

{{$:/LeftMenuEntries}}
\end_layout

\begin_layout Plain Layout

</$scrollable>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create the styles for the left menu
\end_layout

\begin_layout Standard
Tiddlywiki has not styles for showing this menu.
 You have to add them.
 Add a stylesheet tiddler tagged with $:/tags/Stylesheet and add the code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

html .tgc-leftmenu { 
\end_layout

\begin_layout Plain Layout

  display: block;
\end_layout

\begin_layout Plain Layout

  padding: 0px 0px 0px 20px;
\end_layout

\begin_layout Plain Layout

  position: fixed;
\end_layout

\begin_layout Plain Layout

  left: 0px;
\end_layout

\begin_layout Plain Layout

  top: 93px;
\end_layout

\begin_layout Plain Layout

  width: 270px;
\end_layout

\begin_layout Plain Layout

  z-index: 99;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create the entries for the left menu
\end_layout

\begin_layout Standard
If you read the code of the tiddler left menu you can see the line: {{$:/LeftMen
uEntries}}.
 This mean that all things you put in this tiddler appears on your left
 menu.
 You can add to this tiddler:
\end_layout

\begin_layout Itemize
A toc in the usual way.
\end_layout

\begin_layout Itemize
A tabbed tiddler
\end_layout

\begin_layout Itemize
Some tag bubbles
\end_layout

\begin_layout Standard
The options are endless.
\end_layout

\begin_layout Subsection
The next step
\end_layout

\begin_layout Standard
This is the easy way.
 You can add a lot of trimmings.
 For example, you can add a button to show or hide this menu with the $reveal
 widget like the right menu.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "pdf:css_classes"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename Images/CSS.pdf

\end_inset


\end_layout

\begin_layout Chapter
Inside a tiddler
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
A tiddler can perform many roles in Tiddlywiki
\end_layout

\begin_layout Itemize

\size footnotesize
There are many kinds of tiddlers depending of the Content Type field an
 its tags.
\end_layout

\begin_layout Itemize

\size footnotesize
For the external 
\begin_inset Quotes eld
\end_inset

image
\begin_inset Quotes erd
\end_inset

 tiddler types, you have to add the 
\begin_inset Quotes eld
\end_inset

_canonical_uri
\begin_inset Quotes erd
\end_inset

 field with the link of the external file.
\end_layout

\begin_layout Itemize

\size footnotesize
Normal tiddler: tiddler with your notes.
\end_layout

\begin_layout Itemize

\size footnotesize
Tag tiddler: a tiddler with the same title as a tag.
\end_layout

\begin_layout Itemize

\size footnotesize
Alert tiddler: a tiddler that appears on top of all other tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
Dictionary and JSON tiddlers: tiddlers for storing short information.
\end_layout

\begin_layout Itemize

\size footnotesize
CSS tiddlers: tiddlers with css classes for formatting your tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
Template tiddlers: tiddlers used as a template for other tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
Macro tiddlers: tiddlers with your code
\end_layout

\begin_layout Itemize

\size footnotesize
Javascript tiddlers: Macros and Widgets.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Types of tiddlers
\end_layout

\begin_layout Standard
Tiddlers are the heart of Tiddlywiki.
 Once the Microkernel loads the tiddler functions (addTiddler(tdlr), deleteTiddl
er(tdlr), etc) the rest of the code is stored in tiddlers.
 This means that a tiddler can hold several roles, not only for our notes.
\end_layout

\begin_layout Standard
All tiddlers have a field.
 It is below the text in edit mode: Type.
 It is used to tell Tiddlywiki the type of the tiddler.
 But Tiddlywiki not only look this field to determine the role of the wiki.
 TW also look the tags asigned to the tiddler
\end_layout

\begin_layout Standard
How many of roles does a tiddler have?
\end_layout

\begin_layout Description
Normal
\begin_inset space ~
\end_inset

tiddler: It stores your notes and thinkings.
\end_layout

\begin_layout Description
Tag
\begin_inset space ~
\end_inset

tiddler: Is a tiddler with the same title as a tag.
\end_layout

\begin_layout Description
Alert
\begin_inset space ~
\end_inset

tiddler: It shows an alert that remains open on the screen.
\end_layout

\begin_layout Description
Image
\begin_inset space ~
\end_inset

tiddler: If you drag a picture into a Tiddlywiki it stores the image in
 a tiddler.
\end_layout

\begin_layout Description
Dictionary
\begin_inset space ~
\end_inset

tiddler: Is a tiddler for storing data.
\end_layout

\begin_layout Description
JSON
\begin_inset space ~
\end_inset

tiddler: Another way of storing data.
\end_layout

\begin_layout Description
CSS
\begin_inset space ~
\end_inset

tiddler: It stores the css rules for text formatting.
\end_layout

\begin_layout Description
Template
\begin_inset space ~
\end_inset

tiddler: It stores the template for other tiddler or even the whole Tiddlywiki
 screen.
\end_layout

\begin_layout Description
Macro
\begin_inset space ~
\end_inset

tiddler: a tiddler that stores macros.
\end_layout

\begin_layout Description
Javascript
\begin_inset space ~
\end_inset

tiddler: A tiddler with javascript code.
 It stores the tiddlywiki code and your widgets.
\end_layout

\begin_layout Description
Other
\begin_inset space ~
\end_inset

system
\begin_inset space ~
\end_inset

tiddlers: There are special tiddlers that have utility to configure tiddlywiki.
 They are usually tiddlers with a specific name.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:The-tiddler-type"

\end_inset

The tiddler type field
\end_layout

\begin_layout Standard
If you add a tiddler you can see under the content a field: Type.
 In this field Tiddlywiki stores the content type of the tiddler if it is
 not text.
 This table shows the kind of content that supports TW.
 The addicional content rows contains content not documented in the TW site.
 The next table show all roles a tiddler can have:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="32" columns="3">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
\color blue
Role
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
\color blue
Type field
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
\color blue
Tag
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Normal tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Tag tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Alert tiddler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/Alert
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
JSON tiddler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
application/json
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Dictionary tiddler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
application/x-tiddler-dictionary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
External content
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
GIF image tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
image/gif
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
JPG image tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
image/jpeg
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
PNG image tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
image/png
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ICO image tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
image/x-icon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
SVG image tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
image/svg+xml
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
PDF tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
application/pdf
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
CSS tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/Stylesheet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
Code & shortcuts
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Keyboard shortcut
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/KeyboardShortcut
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Macro tiddler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/Macro
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Widget
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
application/javascript
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/Macro
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
javascript code tiddler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
application/javascript
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
Template tiddlers
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Page template
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/PageTemplate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
View template
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/ViewTemplate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Edit template
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/EditTemplate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
Buttons
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Page toolbar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/PageControls
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
View toolbar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/ViewToolbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Edit toolbar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/EditToolbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
Additional content
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Audio mp3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
audio/mp3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Video mp4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
video/mp4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
\size footnotesize
\color blue
Other
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Splash string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
$:/tags/RawMarkupWikified/TopBody
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\series bold
Example.
 Adding a jpg external image: 
\series default
Imagine you have a directory called files in the same location as your wiki
 and inside this directory a png image, beach.png.
 If you want to add a tiddler with this image these are the steps:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Adding-external-files"

\end_inset

Adding external files
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/External_png.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Add a tiddler
\end_layout

\begin_layout Itemize
In the Type field write: 
\begin_inset Quotes erd
\end_inset

image/png
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Add other field called 
\begin_inset Quotes eld
\end_inset

_canonical_uri
\begin_inset Quotes erd
\end_inset

 with this content: 
\begin_inset Quotes eld
\end_inset

files/beach.png
\begin_inset Quotes erd
\end_inset

 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Adding-external-files"
plural "false"
caps "false"
noprefix "false"

\end_inset

)
\end_layout

\begin_layout Itemize
Save the tiddler
\end_layout

\begin_layout Section
Normal tiddler
\end_layout

\begin_layout Standard
You add a normal tiddler with the plus button on the left side of Tiddlylwiki.
 Add the title and the content.
\end_layout

\begin_layout Standard
This tiddler contains wikitext.
 Wikitext is normal text with formatting characters.At the end of the chapter
 you can see a mindmap with all options.
\end_layout

\begin_layout Section
Tag tiddler
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "40col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tag hierarchy
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Tag_hierarchy.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A tag tiddler is a normal tiddler titled with the name of a tag.
 The main advantage to do this is to construct a hierarchy of tags.
 For example, imagine you want to create this hierarchy:
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

 tiddler without tags.
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Quotes eld
\end_inset

Employee
\begin_inset Quotes erd
\end_inset

 tiddler and tag it with the 
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Quotes eld
\end_inset

Supervisor
\begin_inset Quotes erd
\end_inset

 tiddler and tag it with the 
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Quotes eld
\end_inset

Manager
\begin_inset Quotes erd
\end_inset

 tiddler with the 
\begin_inset Quotes eld
\end_inset

Supervisor
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Quotes eld
\end_inset

Team Leader
\begin_inset Quotes erd
\end_inset

 tiddler with the 
\begin_inset Quotes eld
\end_inset

Supervisor
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Standard
This is useful, for example to add an index to the sidebar.
\end_layout

\begin_layout Section
Alert tiddler
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:An-alert-tiddler"

\end_inset

An alert tiddler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Alert_tiddler.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tiddlywiki can show alerts.
 An alert is a tiddler with the $:/tags/Alert tag.
\end_layout

\begin_layout Section
Dictionary tiddler
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-dictionary-tiddler"

\end_inset

A dictionary tiddler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Dictionary_tiddler.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A dictionary tiddler is a way of storing data.
 Create a tiddler in the usual way and tag it with the application/x-tiddler-dic
tionary tag.
 Now you can enter your data using this notation: data:content.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-dictionary-tiddler"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you can see a tiddler to store telephone numbers.
 Each term is called 
\begin_inset Quotes eld
\end_inset

index
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
If you can use this data you can add a tiddler and transclude the index
 you want.
 For example, if you add the text:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Peter Smith: {{Telephones##Peter Smith}}
\end_layout

\end_inset

the output will be:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Peter Smith: +44 598 52 23 40
\end_layout

\end_inset


\end_layout

\begin_layout Section
JSON tiddlers
\end_layout

\begin_layout Standard
They are data tiddlers too but in JSON format.
 If you want to look at a JSON datatiddler open the $:/HistoryList tiddler.
\end_layout

\begin_layout Section
CSS tiddlers
\end_layout

\begin_layout Standard
You can change the way you display tiddlywiki elements by adding css code
 in CSS tiddlers.
 They are tiddlers with the $:/tags/Stylesheet tag.
\end_layout

\begin_layout Section
Template tiddlers
\end_layout

\begin_layout Standard
They are tiddlers to customize the way Tiddlywiki shows some tiddlers.
 They are text and 
\begin_inset Quotes eld
\end_inset

instructions
\begin_inset Quotes erd
\end_inset

 that tell Tiddlywiki how to shows all tiddler elements.
\end_layout

\begin_layout Section
Other system tiddlers
\end_layout

\begin_layout Subsection
$:/config/EmptyStoryMessage
\end_layout

\begin_layout Standard
Here you can add a little message that appears if you close all tiddlers.
 When you close all tiddlers this message appears as plain text without
 Wikitext or any format options.
\end_layout

\begin_layout Standard
If you want a more complicated message you can transclude a custom tiddler
 with the $:/core/ui/ViewTemplate template.
 These are the steps:
\end_layout

\begin_layout Enumerate
Create the tiddler you want to show when all tiddlers are closed.
 For example, 
\begin_inset Quotes eld
\end_inset

Empty List
\begin_inset Quotes erd
\end_inset

.
 Add your message in the content, for example: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

You have closed all tiddlers.
 Use the menu on the right to open any of them or click on [[GettingStarted]]
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Create the tiddler $:/config/EmptyStoryMessage
\end_layout

\begin_layout Enumerate
Add the code {{Empty List||$:/core/ui/ViewTemplate}} to its content.
\end_layout

\begin_layout Enumerate
Save all.
\end_layout

\begin_layout Standard
Now, if you close all tiddler this is the screen:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-$:/config/EmptyStoryMessage"

\end_inset

The $:/config/EmptyStoryMessage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Emtpy Storylist.png
	lyxscale 75
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can see in this figure there are no open tiddlers (look at the right
 open tab menu) but it shows the Empty List tiddler.
\end_layout

\begin_layout Section
Adding macros and widgets
\end_layout

\begin_layout Standard
Here you can find basic information.
 Advanced information in later chapters
\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename Images/Wikitext.pdf

\end_inset


\end_layout

\begin_layout Chapter
Filters
\end_layout

\begin_layout Section
Key points
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Itemize

\size footnotesize
Filters are a way to find information in your wiki.
 They produce a list of tiddlers.
\end_layout

\begin_layout Itemize

\size footnotesize
Each filter expression is divided in many simple filters.
\end_layout

\begin_layout Itemize

\size footnotesize
Each simple filter is called a filter step.
\end_layout

\begin_layout Itemize

\size footnotesize
Each simple step is enclosed in [ ].
\end_layout

\begin_layout Itemize

\size footnotesize
Each simple filter represents a simple search criteria.
\end_layout

\begin_layout Itemize

\size footnotesize
The simplest way of using filters is enclosing them: {{{ the filter }}}
\end_layout

\begin_layout Itemize

\size footnotesize
You can customize the list produced by the filter using widgets.
\end_layout

\begin_layout Itemize

\size footnotesize
Write {{{ [search1] [search2] }}} to find tiddlers that are in search1 OR
 in search2.
\end_layout

\begin_layout Itemize

\size footnotesize
Write {{{ [search1] +[search2] }}} to find tiddlers that are in search1
 AND in search2.
\end_layout

\begin_layout Itemize

\size footnotesize
Write {{{ [search1] -[search2] }}} to find tiddlers that are in search1
 AND NOT in search2.
\end_layout

\begin_layout Itemize

\size footnotesize
Write {{{ [!search] to find all tiddlers that are not in the search.
\end_layout

\begin_layout Itemize

\size footnotesize
The main part of a simple filter is the filter operator.
\end_layout

\begin_layout Itemize

\size footnotesize
There are many filter operators.
\end_layout

\begin_layout Itemize

\size footnotesize
It is impossible to show all operators here, so it is important to understand
 the filter operator reference in the 
\begin_inset CommandInset href
LatexCommand href
name "Tiddlywiki site"
target "https://tiddlywiki.com/#Filter%20Operators"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize

\size footnotesize
You can concatenate operators in a simple filter expression.
 For example, use {{{ [prefix[F]suffix[n]!sort[]] }}} to show the tiddlers
 that start with F and end with n sorted in descendant order.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
What is a filter?
\end_layout

\begin_layout Standard
Filters are the heart of Tiddlywiki.
 More than a half or all customizations you make will include filters.
 This means that understanding filters is crucial.
\end_layout

\begin_layout Standard
To understand filters we need to realize some points:
\end_layout

\begin_layout Itemize
Tiddlywiki is a database of tiddlers.
 You saw in the code of Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Introduction"
plural "false"
caps "false"
noprefix "false"

\end_inset

 that there is a section of the html file called Store Area dedicated of
 storing the tiddlers.
\end_layout

\begin_layout Itemize
The main task of knowledge management is to find what information matches
 a certain pattern.
 In Tiddlywiki this means finding what tiddlers match a given pattern.
\end_layout

\begin_layout Itemize
You can do this task with Filters.
\end_layout

\begin_layout Itemize
When you search your information with a filter, Tiddlywiki gives you a list
 of tiddlers called 
\begin_inset Quotes eld
\end_inset

the output
\begin_inset Quotes erd
\end_inset

.
 You find the List concept in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Lists"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
So a filter is a concise notation for selecting a particular set of tiddlers.
 To work with filters you must perform two steps:
\end_layout

\begin_layout Enumerate

\series bold
Prepare the filter expression
\series default
.
 This includes the filter operators (tag, prefix, contains, field...) and parameter
s.
\end_layout

\begin_layout Enumerate

\series bold
Use the filter
\series default
.
 This includes using widgets ($list, $link, $transclude...) and variables (<<curren
tTiddler>>).
\end_layout

\begin_layout Section
The filter expression
\end_layout

\begin_layout Standard
A filter expression is many simple filters written one after another:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

SimpleFilter1 SimpleFilter2 SimpleFilter3...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You must separate the simple filters with a white space.
 We call each simple expression 
\series bold

\begin_inset Quotes eld
\end_inset

a filter step
\series default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
This simple expressions can be preceded with the prefixes =, +, -, ~ or
 nothing:
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

SimpleFilter1 SimpleFilter2
\end_layout

\end_inset

: Union of the two list (OR combination)
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[manager]]
\end_layout

\end_inset

 produces a list with all tiddlers tagged with the 
\begin_inset Quotes eld
\end_inset

manager
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[manager]] [tag[employee]]
\end_layout

\end_inset

 produces a list with all managers and all empooyees (it list a tiddler
 if it has the 
\begin_inset Quotes eld
\end_inset

manager
\begin_inset Quotes erd
\end_inset

 tag OR the 
\begin_inset Quotes eld
\end_inset

employee
\begin_inset Quotes erd
\end_inset

 tag.
 Maybe the managers will be listed twice).
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

SimpleFilter1 =SimpleFilter2
\end_layout

\end_inset

: Union of the two list without duplication.
 (OR combination)
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[manager]] =[tag[employee]]
\end_layout

\end_inset

 produces the list of all managers and all employees.
 Each person is listed once.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

SimpleFilter1 +SimpleFilter2
\end_layout

\end_inset

: The tiddlers must match both filters.
 It is the intersections of the two list (AND combination)
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[manager]] +[tag[has car]]
\end_layout

\end_inset

 produce a list with all managers with car (it list a tiddler if it has
 the 
\begin_inset Quotes eld
\end_inset

manager
\begin_inset Quotes erd
\end_inset

 tag AND the 
\begin_inset Quotes eld
\end_inset

has car
\begin_inset Quotes erd
\end_inset

 tag).
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

SimpleFilter1 -SimpleFilter2
\end_layout

\end_inset

: The tiddlers must match the first filter expression and must not match
 the second.
 It is the difference of the two list (AND NOT combination).
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[employee]] -[tag[manager]]
\end_layout

\end_inset

 produce a list of all employees that are not managers (it list a tiddler
 if it has the employee tag AND NOT has the manager tag).
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

SimpleFilter1 ~SimpleFilter2
\end_layout

\end_inset

: It produces the list of the first filter.
 If it is empty, it produces the list of the second filter (ELSE combination)
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag[manager]] ~[tag[employee]]
\end_layout

\end_inset

.
 It produces a list with all managers.
 If there is no managers it list all employees.
\end_layout

\end_deeper
\begin_layout Section
Using filters
\end_layout

\begin_layout Standard
Imagine you have a wiki with the employees of your company.
 Some of them are managers and a few have a car given by the company.
 Your tags are: 
\begin_inset Quotes eld
\end_inset

employee
\begin_inset Quotes erd
\end_inset

 for all employees, 
\begin_inset Quotes eld
\end_inset

manager
\begin_inset Quotes erd
\end_inset

 for the managers and 
\begin_inset Quotes eld
\end_inset

has car
\begin_inset Quotes erd
\end_inset

 for the employees with assigned car.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-simple-output"

\end_inset

The simple output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/filters.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using filters can be tricky.
 The simplest use is enclosing the filter expression between three curly
 brackets:
\end_layout

\begin_layout Itemize
Add a new tiddler: 
\begin_inset Quotes eld
\end_inset

All employees
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
In the content of this tiddler add this text: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{[tag[employee]]}}}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Save the it.
\end_layout

\begin_layout Standard
You will see the output of the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-simple-output"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 You know each line is the title of a tiddler, so in your wiki you have
 7 tiddlers tagged with 
\begin_inset Quotes eld
\end_inset

employee
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-desire-output"

\end_inset

The desire output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/using_filters.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
But if you want a more complicated output you have to use widgets.
 Imagine you want to show the list of the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-desire-output"
plural "false"
caps "false"
noprefix "false"

\end_inset

 with the tiddlers you have in your wiki.
 This is a list with the employees who have an assigned car and his state.
 You have to write this code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$list filter="[tag[employee]] +[tag[has car]]">
\end_layout

\begin_layout Plain Layout

  <li><$link><<currentTiddler>></$link> --- {{!!state}}</li> 
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this code we can see:
\end_layout

\begin_layout Itemize
We use the $list widget.
\end_layout

\begin_layout Itemize
With each tiddler of the filter output, we show:
\end_layout

\begin_deeper
\begin_layout Itemize
A list <li> element.
\end_layout

\begin_layout Itemize
The link ($link widget) of current tiddler (<<currentTiddler>> variable).
\end_layout

\begin_layout Itemize
A long dash (the - - - element).
\end_layout

\begin_layout Itemize
The content of the 
\begin_inset Quotes eld
\end_inset

state
\begin_inset Quotes erd
\end_inset

 field of the current tiddler ({{!!state}} element).
\end_layout

\end_deeper
\begin_layout Section
The filter basic step
\end_layout

\begin_layout Standard
Each Simple filter is called 
\begin_inset Quotes eld
\end_inset

a basic step
\begin_inset Quotes erd
\end_inset

.
 You may have notice that all SimpleFilter expression is surrounded between
 [ ].
 So each Filter Basic step is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ ! operator:sufix parameter ! operator:sufix parameter ...]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can repeat this sequence as many times as you need.
 Each occurrence of 
\begin_inset Quotes eld
\end_inset

!operator:suffix parameter
\begin_inset Quotes erd
\end_inset

 use the list produced by its predecessors.
 This list is called 
\begin_inset Quotes eld
\end_inset

the input
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
All elements are optional:
\end_layout

\begin_layout Itemize
The ! means not.
 For example, [!tag[has-car]]: tiddlers without the tag 
\begin_inset Quotes eld
\end_inset

has-car
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Operator: the most important part of the filter.
 In the above examples the operator is 
\begin_inset Quotes eld
\end_inset

tag
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Suffix: some operators has special flags.
 For example, the tag operator has a flag, strict that modifies its behaviour
 in some cases so the output with {{{ [tag[]] }}} is different from {{{
 [tag:strict[]] }}}.
\end_layout

\begin_layout Itemize
Parameter: In the above examples the parameter is the desire tag, 
\begin_inset Quotes eld
\end_inset

employee
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

manager
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

has-car
\begin_inset Quotes erd
\end_inset

.
 Usually the parameter is surrounded with [ ] too.
 If there is no parameter: write [] as above.
\end_layout

\begin_layout Standard
The main trick of filters is understand the filter operators.
 There are a lot of them so write about all is out of the scope of this
 publication.
 If you want to know more about them you have to go to the 
\begin_inset CommandInset href
LatexCommand href
name "Filter Operators"
target "https://tiddlywiki.com/#Filter%20Operators"
literal "false"

\end_inset

 section of Tiddlywiki.
\end_layout

\begin_layout Standard
Let's look an example:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The prefix operator
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/prefix_operator.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
How to read this tiddler:
\end_layout

\begin_layout Itemize
Purpose: What you can use the operator for.
\end_layout

\begin_layout Itemize
Input: The first 
\begin_inset Quotes eld
\end_inset

!operator:suffix parameter
\begin_inset Quotes erd
\end_inset

 occurrence has all tiddlers as the input.
 For the second occurrence, the input is the list produced by the first
 and so on.
 Each 
\begin_inset Quotes eld
\end_inset

!operator:suffix parameter
\begin_inset Quotes erd
\end_inset

 filters the list produced by the predecessors.
\end_layout

\begin_layout Itemize
Parameter: The parameter of the operator.
 In this operator is a sequence of characters so you can write [prefix[H]]
 to show all tiddlers with the tittle starting with 
\begin_inset Quotes eld
\end_inset

H
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Output: What list produce the operator.
\end_layout

\begin_layout Itemize
!Output: What list produce the operator if you put, for example, [!prefix[H]].
\end_layout

\begin_layout Standard
Example: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{ [prefix[F]suffix[n]!sort[]] }}}
\end_layout

\end_inset

 This 
\series bold
simple filter expression
\series default
 has three repetitions of 
\begin_inset Quotes eld
\end_inset

!operator:suffix parameter
\begin_inset Quotes erd
\end_inset

 and it means: 
\begin_inset Quotes eld
\end_inset

Show all tiddlers that begin with F and end with n in descending order
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
{{{ : Show the result filter expression as a list of tiddlers.
\end_layout

\begin_layout Itemize
[ : Start of the Simple Filter Expression.
\end_layout

\begin_layout Itemize
prefix[F]: produce the list of all tiddlers whose title begins with 
\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
suffix[n]: Filter this list and produces a list with the tiddlers whose
 title ends with 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
!sort[] Sort descending the list of the tiddlers whose title starts with
 
\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset

 and ends with 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
] : Ends the Filter Simple Expression.
\end_layout

\begin_layout Itemize
}}} : Finish the code.
\end_layout

\begin_layout Standard
If you add a tiddler with this code to the tiddlywiki site you can see the
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-filter-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-filter-example"

\end_inset

A filter example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Filter_example.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Remember that this is a single step of a filter expression and that you
 can concatenate as many single filter expression as you want.
 For example, you can show the tiddlers whose title starts with 
\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset

 and ends with 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset

 tagged with 
\begin_inset Quotes eld
\end_inset

Filter Syntax
\begin_inset Quotes erd
\end_inset

 with this code: 
\begin_inset listings
lstparams "showspaces=true"
inline false
status open

\begin_layout Plain Layout

{{{ [prefix[F]suffix[n]] +[tag[Filter Syntax]] }}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have here two simple filter expressions, the second one with the 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 prefix forming a more complex filter expression.
\end_layout

\begin_layout Section
Regular expressions
\end_layout

\begin_layout Subsection
Writing regular expressions
\end_layout

\begin_layout Standard
Regular expressions are concise strings of characters that denote patterns
 of text to search for.
 Tiddlywiki uses the Javascript regular expressions.
 The most important is the representation of this patterns.
 This table shows the most important patterns:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="2">
<features booktabs="true" islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
character
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zero or more repetitions of the character or previous group
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
one or more repetitions of the character or previous group
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Group or characters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

( )
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sub expressions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(a|b|c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a or b or c
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coincides with the previous element zero or one times
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
??
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coincides with the previous element one or no times
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{n}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coincides with the previous element n times
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{n,m}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
with the previous element at least n times and at most m times
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[a-z]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character between a and z
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character of a word: a-zA-Z
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character other than the previous one
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
s
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blank space
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
S
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character that is not a blank space
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A dígit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anything other than a digit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a tab
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Carriage return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
1 
\backslash
2 
\backslash
3 ...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The group number 1 or number 2 or the n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The following character is treated as literal (e.g.
 
\backslash
 * indicates the asterisk)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Building-the-regular"

\end_inset

Building the regular expression
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/regular_expressions.png
	lyxscale 25
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The most complicated thing is to build the regular expression.
 I recommend dividing the string you want to look for in its main parts.
 For example, imagine you want to search all tiddlers that has a date in
 his title like 25th August 2019.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Building-the-regular"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you can see all parts of this string:
\end_layout

\begin_layout Itemize
^: The start of the line
\end_layout

\begin_layout Itemize

\backslash
d{1,2}: One or two digits
\end_layout

\begin_layout Itemize
(st|nd|rd|th): One of this: st or nd or rd or th.
\end_layout

\begin_layout Itemize

\backslash
s: a space
\end_layout

\begin_layout Itemize
(January|February|March|April|May|June|July|August|September|October|November|De
cember): The month
\end_layout

\begin_layout Itemize

\backslash
s: A space
\end_layout

\begin_layout Itemize

\backslash
d{4}: Four digits
\end_layout

\begin_layout Itemize
$: The end of the line
\end_layout

\begin_layout Standard
So the regular expression is 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

^
\backslash
d{1,2}(st|nd|rd|th)
\backslash
s(January|February|March|April|May|June|July|August|September|October|November|D
ecember)
\backslash
s
\backslash
d{4}$
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Using regular expressions
\end_layout

\begin_layout Standard
Using regular expressions is not complicated.
 Tiddlywiki has a filter operator: regexp to define this kind of searches.
 Create a new tiddler an add this in the body:
\end_layout

\begin_layout Standard
Tiddlers titled with two letters: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{ [regexp[^
\backslash
w{2}$]] }}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Tiddlers ending with 
\begin_inset Quotes eld
\end_inset

wiki
\begin_inset Quotes erd
\end_inset

 in its title: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{ [regexp[wiki$]] }}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Tiddlers created in August 2014: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{ [regexp:created[^201408]] }}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If you want more complicated expressions is better to define a variable
 with the pattern.
 Tiddlywiki has problems with groups.
 For example, if you want to search all tiddlers ending with the words 
\begin_inset Quotes eld
\end_inset

wiki
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

tiddler
\begin_inset Quotes erd
\end_inset

 and write: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

{{{ [regexp[(wiki|tiddlers)$]] }}}
\end_layout

\end_inset

 Tiddlywiki shows an error.
 You have to write:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$set name="pattern" value="(wiki|tiddlers)$">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

{{{ [regexp<pattern>] }}} 
\end_layout

\begin_layout Plain Layout

</$set>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, if you want to show all tiddlers who has a date in its title, as in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Building-the-regular"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you have to write:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$set name="pattern" value="^
\backslash
d{1,2}(st|nd|rd|th)
\backslash
s(January|February|March|April|May|June|July|August|September|October|November|D
ecember)
\backslash
s
\backslash
d{4}$">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

{{{ [regexp<pattern>]}}} 
\end_layout

\begin_layout Plain Layout

</$set>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One tricky question in regular expressions are capturing groups.
 Each subexpresion (a pattern surrounded by parentheses) is called a capturing
 group.
 We can refer to the first capture group by 
\backslash
1.
 The second by 
\backslash
2 and so respectively.
\end_layout

\begin_layout Standard
Imagine you want to show all tiddlers that starts and ends with 
\begin_inset Quotes eld
\end_inset

Wiki
\begin_inset Quotes erd
\end_inset

: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$set name="pattern" value="^(Wiki).*
\backslash
1$">
\end_layout

\begin_layout Plain Layout

{{{ [regexp<pattern>]}}} </$set>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The (Wiki) is the first capturing group of the expression.
 If you want to refer later to this pattern you write 
\backslash
1.
\end_layout

\begin_layout Standard
Be careful with this.
 Maybe you want to search a tiddler that start and end with any two numbers,
 so you write this: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

^(
\backslash
d{2}).*
\backslash
1$
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
^: Start of line
\end_layout

\begin_layout Itemize
(
\backslash
d{2}): two digits, first capturing group.
\end_layout

\begin_layout Itemize
.*: Any character repeated many times
\end_layout

\begin_layout Itemize

\backslash
1: Two digits again.
\end_layout

\begin_layout Itemize
$: End of line
\end_layout

\begin_layout Standard
You will find only the tiddlers who start and end WITH THE SAME TWO DIGITS.
 If you want to search not the same numbers you have to write 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

^
\backslash
d{2}.*
\backslash
d{2}$
\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
Macros
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
A macro is a named snippet of text.
 WikiText can use the name as a shorthand way of transcluding the snippet.
 In the next code we define a macro for a greeting:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout


\backslash
define sayhi(name:"Bugs Bunny" address:"Rabbit Hole Hill")
\end_layout

\begin_layout Plain Layout

Hi, I'm $name$ and I live in $address$.
 
\end_layout

\begin_layout Plain Layout


\backslash
end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Later we can use it in this way:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<sayhi "Donald Duck" Disneyland>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the result is: 
\shape italic
Hi, I'm Donald Duck and I live in Disneyland
\shape default
.
\end_layout

\begin_layout Section
Variables and parameters
\end_layout

\begin_layout Subsection
Defining variables
\end_layout

\begin_layout Standard
There are two ways of defining variables.
 The first with the <$set> sidget and the second with the <$vars> widget.
 With the first we define a variable with each set.
 With the second we can define multiple variables at once.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$set name=
\begin_inset Quotes erd
\end_inset

myvariable
\begin_inset Quotes erd
\end_inset

 value=
\begin_inset Quotes erd
\end_inset

the_value
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Plain Layout

<<myvariable>>
\end_layout

\begin_layout Plain Layout

</$set>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$vars greeting="Hi" me={{!!title}} sentence=<<helloworld>> >
\end_layout

\begin_layout Plain Layout

  <<greeting>>! I am <<me>> and I say: <<sentence>>
\end_layout

\begin_layout Plain Layout

</$vars>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parameters
\end_layout

\begin_layout Standard
In the sayhi macro of the introduction we can see two parameters: name and
 address.
 A parameter is like a variable but in the scope of a macro.
 They have values when using the macro.
\end_layout

\begin_layout Subsection
Using variables and parameters
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Using-variables"

\end_inset

Using variables
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/Variables.png
	lyxscale 25
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can use variables in parameters in many places: in a tiddler, inside
 the definition of a macro, in fieds, in filters, in links...
 The way of using them depends of the place and is very very tricky.
\end_layout

\begin_layout Section
Basic macros included
\end_layout

\begin_layout Section
Writing your own macros
\end_layout

\begin_layout Section
Using macros
\end_layout

\begin_layout Chapter
Widgets
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Widgets are trickiest part of Tiddlywiki.
 Each widget has a special purpose: add a checkbox, create a button, display
 a field etc.
 There are core widgets and other widgets you can add as plugins.
\end_layout

\begin_layout Standard
We learn widgets solving a problem: Create a custom to-do wiki.
 The easy an worst way is create a tiddler for each task and other tiddler
 with all this tasks:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

* [[Study javascript]]
\end_layout

\begin_layout Plain Layout

* [[Download github]]
\end_layout

\begin_layout Plain Layout

* [[Create the repository]]
\end_layout

\begin_layout Plain Layout

* [[Download the code]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This has a terrible problem: you have no control of the tasks you finish.
 Of course you can edit the tasks tiddlers and add a tag, 
\begin_inset Quotes eld
\end_inset

done
\begin_inset Quotes erd
\end_inset

 for the tiddlers you finish but this is a big effort.
\end_layout

\begin_layout Section
The checkbox widget
\end_layout

\begin_layout Standard
If you read the tiddler for this widget you find that you can save the status
 of the widget in:
\end_layout

\begin_layout Itemize
A tag (tag mode): the easiest
\end_layout

\begin_layout Itemize
A tiddler: useful for shared status.
\end_layout

\begin_layout Itemize
A field (field mode): of the same tiddler or other tiddler.
\end_layout

\begin_layout Itemize
An index of a data tiddler (index mode).
\end_layout

\begin_layout Standard
These are the attributes for the checkbox widget:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Attribute
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
tiddler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Title of the tiddler to manipulate (defaults to the current tiddler)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
tag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The name of the tag to which the checkbox is bound
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
invertTag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
When set to yes, flips the tag binding logic so that the absence of the
 tag causes the checkbox to be checked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
field
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The name of the field to which the checkbox is bound
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
index
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
New in: 5.1.14 The index of the tiddler, a DataTiddler, to which the checkbox
 is bound be sure to set the tiddler correctly
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
checked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The value of the field corresponding to the checkbox being checked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
unchecked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The value of the field corresponding to the checkbox being unchecked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
default
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The default value to use if the field is not defined
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
class
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The class that will be assigned to the label element
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
actions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
New in: 5.1.14 A string containing ActionWidgets to be triggered when the
 status of the checkbox changes (whether it is checked or unchecked)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For our little project we use the tag mode.
 This is the tasks tiddler code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$checkbox tiddler="Study javascript" tag="done"> [[Study javascript]]</$checkbo
x><br/>
\end_layout

\begin_layout Plain Layout

<$checkbox tiddler="Download github" tag="done"> [[Download github]]</$checkbox>
<br/>
\end_layout

\begin_layout Plain Layout

<$checkbox tiddler="Create the repository" tag="done"> [[Create the repository]]
</$checkbox><br/>
\end_layout

\begin_layout Plain Layout

<$checkbox tiddler="Download the code" tag="done"> [[Download the code]]</$check
box><br/>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Adding-a-checkbox"

\end_inset

Adding a checkbox
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/checkbox_widget.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding new tasks is still a complex process.
 We need an easy way of listing the tasks.
 We solve this with other tiddler: $list.
\end_layout

\begin_layout Section
The $list widget
\end_layout

\begin_layout Standard
We have to simplify things.
 We have to tell Tiddlywiki which tiddlers are tasks.
 We do this adding the 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

 tag for task tiddlers.
 We saw the $list widgets in the 
\begin_inset Quotes eld
\end_inset

Filters
\begin_inset Quotes erd
\end_inset

 chapter.
 Is an easy way to list custom tiddlers.
 For our purpose we want to list all task tiddlers:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$list filter="[tag[task]]">
\end_layout

\begin_layout Plain Layout

<$checkbox tag="done"/> <$link><<currentTiddler>></$link><br/>
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you tag all tasks with the tag 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

 the output will be the same of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Adding-a-checkbox"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The difference is that creating new tasks is easy: create a new tiddler
 and tag it with the 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

 tag.
 The list will update immediately.
 You can see this widget as a loop: it loops over all tiddlers of the filter
 list executing the code between <$list..> and </$list>.
 Look at Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-widget-loop"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-widget-loop"

\end_inset

The widget loop
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/widget_loop.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example our widget loops over the tasks tiddlers writing the lines:
 <$checkbox tag="done"/> <$link><<currentTiddler>></$link><br/>.
 There are an important question here: the widget inserts lines one after
 another without any blank lines in the middle.
 This can cause problems with wikitext: you know that there are wikitext
 formats that needs a blank line before them.
 for example, if you add to a tiddler:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

This is my list:
\end_layout

\begin_layout Plain Layout

* item 1
\end_layout

\begin_layout Plain Layout

* item 2
\end_layout

\begin_layout Plain Layout

* item 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will see this output: 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

This is my list: * item 1 * item 2 * item 3
\end_layout

\end_inset

If you want the items as a list you have to add a blank line:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

This is my list:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

* item 1
\end_layout

\begin_layout Plain Layout

* item 2
\end_layout

\begin_layout Plain Layout

* item 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In many cases in the list widget you have to add this extra line after the
 <$list> first line.
 For example, if you want to show our output as a wikitext list with bullets
 you have to write:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<$list filter="[tag[task]]">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

* <$link><<currentTiddler>></$link>
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you don't add the empty line after the * element the output will be wrong.
\end_layout

\begin_layout Section
$edit-text widget
\end_layout

\begin_layout Standard
Maybe we can simplify the adding of new task.
 First we analyze the $edit-text widget.
 It provide us a simple way of edit temporal data.
 We use it for writing the text of the new task:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

New task: <$edit-text tiddler="$:/temporal" field="task"/>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All things you write to this text little rectangle applies immediately to
 the field 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

 of the tiddler 
\begin_inset Quotes eld
\end_inset

$:/temporal
\begin_inset Quotes erd
\end_inset

.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-tasks-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you see the field 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

 of this 
\begin_inset Quotes eld
\end_inset

$:/temporal
\begin_inset Quotes erd
\end_inset

 tiddler.
 We use this value later to add our new task.
 The big problem: you cannot use this widget to edit fields of the same
 tiddler because of the lost control of it.
\end_layout

\begin_layout Section
$button widget
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-tasks-list"

\end_inset

The tasks list with a text area to add new tasks
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/todo_tiddler.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A button execute some code.
 You can use a button to delete a tiddler, to add it, to create an alert
 (an special tiddler) to add some tag to a tiddler or a list of tiddler
 (looping with the $list widget inside the $button widget) etc.
\end_layout

\begin_layout Standard
To create a new task we write:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$button>
\end_layout

\begin_layout Plain Layout

<$action-createtiddler $basetitle={{$:/temporal!!task}} tags="task"/>
\end_layout

\begin_layout Plain Layout

<$action-setfield $tiddler="$:/temporal" $field="task" text=""/>
\end_layout

\begin_layout Plain Layout

Create task
\end_layout

\begin_layout Plain Layout

</$button>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When we click the button Tiddlywiki creates a new tiddler titled with the
 text area and tagged with 
\begin_inset Quotes eld
\end_inset

task
\begin_inset Quotes erd
\end_inset

.
 Then delete the text area.
\end_layout

\begin_layout Standard
The all code of our Tasks tiddler is this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<$list filter="[tag[task]]">
\end_layout

\begin_layout Plain Layout

<$checkbox tag="done"/> <$link><<currentTiddler>></$link><br/>
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

New task: <$edit-text tiddler="$:/temporal" field="task"/>
\end_layout

\begin_layout Plain Layout

<$button>
\end_layout

\begin_layout Plain Layout

<$action-createtiddler $basetitle={{$:/temporal!!task}} tags="task"/>
\end_layout

\begin_layout Plain Layout

<$action-setfield $tiddler="$:/temporal" $field="task" text=""/>
\end_layout

\begin_layout Plain Layout

Create task
\end_layout

\begin_layout Plain Layout

</$button>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output is in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-tasks-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section
Combining widgets
\end_layout

\begin_layout Subsection
Collecting information
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Combining-widgets"

\end_inset

Combining widgets
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/widgets_grouping.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Imagine you want to create a data tiddler with all tiddlers of your wiki
 and the date they were created.
 The data tiddler will 
\begin_inset Quotes eld
\end_inset

tiddler created dates
\begin_inset Quotes erd
\end_inset

.
 This is the code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

<$button>
\end_layout

\begin_layout Plain Layout

<$action-deletetiddler $tiddler="tidler created dates"/>
\end_layout

\begin_layout Plain Layout

<$action-createtiddler $basetitle="tidler created dates" type="application/x-tid
dler-dictionary"/>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<$list filter="[all[]!is[system]]">
\end_layout

\begin_layout Plain Layout

<$action-setfield $tiddler="tidler created dates" $index=<<currentTiddler>>
 $value={{!!created}}/>
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\begin_layout Plain Layout

Collect Dates
\end_layout

\begin_layout Plain Layout

</$button>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will loop over all elements of the list inserting the title and the
 created field in the tiddler 
\begin_inset Quotes eld
\end_inset

tiddler created dates
\begin_inset Quotes erd
\end_inset

.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Combining-widgets"
plural "false"
caps "false"
noprefix "false"

\end_inset

 its a little diagram of the code.
 Now, if you open this tiddler you will see the dates.
 The first four numbers are the year, the next two the month and the next
 two the day.
 And after that there is the hour, minute...
 (look at Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tiddler-created-dates"
plural "false"
caps "false"
noprefix "false"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tiddler-created-dates"

\end_inset

Tiddler created dates
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/tiddler_created_dates.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Change a tag
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tiddler-for-changing-tag"

\end_inset

Tiddler for changing a tag
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/change_tag.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
You want to create a tiddler to modify a tag from its original value to
 other value.
 Let's look what widgets we need.
 If you investigate inside the Tiddlywiki site you will find this information:
\end_layout

\begin_layout Itemize
There are two messages: tm-remove-tag and tm-add-tag.
\end_layout

\begin_layout Itemize
The messages are sent inside a $button with the action-sendmessage widget.
\end_layout

\begin_layout Itemize
This two message needs the $fieldmangler to set to which tiddler the change
 applies.
\end_layout

\begin_layout Itemize
You need two $edit-text widget.
 One for the tag to change and the other for the 
\begin_inset Quotes eld
\end_inset

change to
\begin_inset Quotes erd
\end_inset

 tag.
\end_layout

\begin_layout Standard
This is the code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline false
status open

\begin_layout Plain Layout

| Tag to change | Change to |h
\end_layout

\begin_layout Plain Layout

|<$edit-text tiddler="$:/temporal" field="tag_from"/>|<$edit-text tiddler="$:/te
mporal" field="tag_to"/>|
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<$button>
\end_layout

\begin_layout Plain Layout

<$list filter="[tag{$:/temporal!!tag_from}]">
\end_layout

\begin_layout Plain Layout

<$fieldmangler tiddler=<<currentTiddler>>>
\end_layout

\begin_layout Plain Layout

<$action-sendmessage $message="tm-remove-tag" $param={{$:/temporal!!tag_from}}/>
\end_layout

\begin_layout Plain Layout

<$action-sendmessage $message="tm-add-tag" $param={{$:/temporal!!tag_to}}/>
\end_layout

\begin_layout Plain Layout

</$fieldmangler>
\end_layout

\begin_layout Plain Layout

</$list>
\end_layout

\begin_layout Plain Layout

Change tag
\end_layout

\begin_layout Plain Layout

</$button>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notes:
\end_layout

\begin_layout Itemize
The three above lines are for drawing the top table with the two edit text
 zones.
\end_layout

\begin_layout Itemize
The action widgets are triggered by the $button widget.
\end_layout

\begin_layout Itemize
We loop over all tiddlers tagged with tag_from: it is the 
\begin_inset listings
lstparams "breaklines=true,showspaces=true"
inline true
status open

\begin_layout Plain Layout

[tag{$:/temporal!!tag_from}]
\end_layout

\end_inset

 filter
\end_layout

\begin_deeper
\begin_layout Itemize
We insert the messages inside a $fieldmangler widget to set the tiddler
 to modify.
\end_layout

\begin_layout Itemize
For each tiddler of the list we send the two messages with the $action-sendmessa
ge tiddler.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-change-tag-diagram"

\end_inset

The change tag diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/change_tag_diagram.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Writing your own widgets
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "50col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-select-widget"

\end_inset

The select widget output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/widget_select.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The purpose of a widget is, usually to render; it is a tool by which "authors"
 can create rich and dynamic wiki content quickly.
 Widgets are one of the mechanisms by which TiddlyWiki5 becomes a "generative"
 writing tool as opposed to mere static.
 While there are out-of-the-box widgets which provide the rich authoring
 capabilities which most people need, there is also an infrastructure for
 writing widgets to either extend or specialize TiddlyWiki5.
 The purpose of this document is to give new TiddlyWiki5 developers some
 understanding of how widgets work and how to create their own.
\end_layout

\begin_layout Standard
By way of example we'll look at a custom widget developed for a recent project.
 That widget provides a "select" mechanism, allowing users to choose from
 a drop-down list of items; the item selected is passed to the "child" macros
 and widgets of the widget.
 Thus, the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-select-widget"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is the output for this code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML,breaklines=true"
inline false
status open

\begin_layout Plain Layout

<$select list="A B C" name="selection"> The current selection is: <<selection>><
/$select>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This widget is not a core widget.
 You can drag it from the Tiddlywiki where this tiddler is to yours.
\end_layout

\begin_layout Subsection
Data structures
\end_layout

\begin_layout Standard
To understand widgets we need some understanding of four core data structures:
\end_layout

\begin_layout Enumerate
The Parse Tree
\end_layout

\begin_layout Enumerate
The Widget Tree
\end_layout

\begin_layout Enumerate
The Dom Node Tree
\end_layout

\begin_layout Enumerate
The Dom itself.
\end_layout

\begin_layout Standard
The choreography of the work needed on these four data structures may not
 intuitive, so I'll give my understanding at the level needed to get started.
\end_layout

\begin_layout Standard
This question is out of the goal of this book.
 We show how to add javascript code to your tiddler.
\end_layout

\begin_layout Subsubsection
The parse tree
\end_layout

\begin_layout Standard
The Parse Tree is generated by TiddlyWiki5 core parsers as an overall interpreta
tion of all the tiddlers which need to be presented in the browser.
 One of the first things which happens when a tiddler is to be presented
 is that it is parsed
\begin_inset CommandInset ref
LatexCommand ref
reference "gls:Parser"
plural "false"
caps "false"
noprefix "false"

\end_inset

 by the specific parser for the indicated tiddler "type".
 Parsing a tiddler results in a parse tree for that tiddler which is injected
 into the overall Parse Tree.
 When an instance of our widget is initialized, the Parse Tree location
 of "this" instance of our widget is passed to our widget via "parseTreeNode".
 Our widget needs to maintain that location via this.parseTreeNode so that
 we can reference it later, and repeatedly, to do things like reading widget
 attributes when we render our widget.
\end_layout

\begin_layout Subsubsection
The widget tree
\end_layout

\begin_layout Standard
The Widget Tree is generated during rendering and is instantiated by a combinati
on of our initialize() and render() functions; it establishes hierarchic
 relationships between the widgets rendered in the wiki.
 In a sense, the Widget Tree overlays the Parse Tree, providing a widget-only
 view with links back to the Parse Tree.
 We need to know about it because the Widget Tree does at least two very
 important things for us:
\end_layout

\begin_layout Enumerate
It manages the refresh process, so that changes to tiddlers or attributes
 ripple through the branches of the tree efficiently.
 In the case of our <$select...> widget example we use this mechanism to refresh
 the widget itself if any of the widget attributes are changed, otherwise
 we pass the refresh request down through the hierarchy.
\end_layout

\begin_layout Enumerate
It allows us to create "widget variables" which are visible anywhere in
 the branches from the widget which "sets" such variables.
 In the case of the <$select....> widget example we use this mechanism to "pass"
 the selection result to child widgets and macros, so that the selection
 can inform the wiktext contained by the <$select....> widget.
\end_layout

\begin_layout Standard
Two properties of the widget function codify the Widget Tree: this.parentWidget
 and this.children.
 Generally the core Widget function manages these for us.
\end_layout

\begin_layout Subsubsection
The dom node tree
\end_layout

\begin_layout Standard
The Dom Node Tree is generated by our widget ( domNodes in Widget() ); it
 establishes hierarchic relationships between the Widget Tree and the any
 Dom nodes which we want the widget mechanism to manage.
 Typically a widget needs to add a single, root Dom node which we create
 in our render function, but in principle a widget can include several Dom
 nodes without a common root.
 We care because the Dom tree is used to manage deletion of the Dom nodes
 which we create within a widget.
 To make that mechanism work, the root Dom node created by our widget needs
 to be bolted into the Dom node tree.
 We also need to make certain that the default Widget.prototype.removeChildDomNode
s deletes the Dom nodes which our widget creates, or, if it doesn't then
 write a replacement function which does.
\end_layout

\begin_layout Subsubsection
The dom
\end_layout

\begin_layout Standard
The Dom is the Dom.
 We need to know about it, understand it, "program" it, because it is the
 mechanism by which we do the job of rendering.
 Widgets "do" their rendering via a render function, which is where we perform
 standard Dom manipulations to render the html which we desire from our
 widget.
\end_layout

\begin_layout Subsection
Code notes
\end_layout

\begin_layout Standard
The javascript for the <$select....> widget is available at the end of this
 chapter.
\end_layout

\begin_layout Standard
If you look through the code you will see that it is largely a copy-paste
 of almost any one of the standard widgets.
 There are seven functions in all; the first five functions represent a
 pattern common to most widgets; the last two functions are helper functions
 specific to our widget:
\end_layout

\begin_layout Standard
Core Widget Functions:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

SelectWidget.prototype.render
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.execute
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.refresh
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.removeChildDomNodes
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Helper Functions:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

SelectWidget.prototype.getOptionList
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.handleChangeEvent
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Render
\end_layout

\begin_layout Standard
Given that the purpose of a widget is to render, the heart of a widget is
 the render function.
 Typically, we don't need to do any customization of the render function,
 but we need to understand what it does.
 The reason that we don't typically need to do much in render is that most
 of the work is typically done by two major functions invoked by render,
 namely execute and create, and we do most of our customization in those
 functions.
\end_layout

\begin_layout Standard
The main steps of "render" are as follows:
\end_layout

\begin_layout Enumerate
Maintain a link to the parent DOM node, i.e.
 the DOM element immediately above any DOM elements which we create with
 this widget.
\end_layout

\begin_layout Enumerate
Fetch any attributes which were included in the "call" to this widget.
\end_layout

\begin_layout Enumerate
Perform calculations needed ahead of construction of the DOM elements for
 this widget, including making any "child" widgets required by this widget.
\end_layout

\begin_layout Enumerate
Create the actual DOM elements for this widget.
 Insert the DOM elements for this widget into the parent DOM node structure.
\end_layout

\begin_layout Enumerate
Use renderChildren to render each of the child widgets.
 These child widgets are rendered as DOM child elements of the DOM node
 we created earlier with create.
 These child widgets were either created by the earlier execute function
 or could be widgets wrapped by this widget in the wikiText.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

SelectWidget.prototype.render = function(parent,nextSibling) {
\end_layout

\begin_layout Plain Layout

this.parentDomNode = parent;
\end_layout

\begin_layout Plain Layout

this.computeAttributes();
\end_layout

\begin_layout Plain Layout

this.execute();
\end_layout

\begin_layout Plain Layout

var domNode = this.create(parent,nextSibling);
\end_layout

\begin_layout Plain Layout

this.domNodes.push(domNode);
\end_layout

\begin_layout Plain Layout

parent.insertBefore(domNode,nextSibling);
\end_layout

\begin_layout Plain Layout

this.renderChildren(domNode,null);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Execute
\end_layout

\begin_layout Standard
The execute function is invoked by the render function, and it typically
 does two things for us:
\end_layout

\begin_layout Enumerate
Fetches attributes which were included in the widget's invocation, whether
 wikiText or otherwise.
\end_layout

\begin_layout Enumerate
Makes child widgets
\end_layout

\begin_layout Standard
Child widgets can come from the originating wikitext, or be created programmatic
ally as part of the the execute function.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

SelectWidget.prototype.execute = function() {
\end_layout

\begin_layout Plain Layout

// get attributes
\end_layout

\begin_layout Plain Layout

this.filter = this.getAttribute("filter");
\end_layout

\begin_layout Plain Layout

this.list = this.getAttribute("list");
\end_layout

\begin_layout Plain Layout

this.tiddler = 
\end_layout

\begin_layout Plain Layout

this.getAttribute("tiddler",this.getVariable("currentTiddler"));
\end_layout

\begin_layout Plain Layout

this.selectClass = this.getAttribute("class");
\end_layout

\begin_layout Plain Layout

this.setName = this.getAttribute("name","currentTiddler");
\end_layout

\begin_layout Plain Layout

// make child widgets
\end_layout

\begin_layout Plain Layout

this.makeChildWidgets();
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case we don't create any child widgets as part of this widget, but
 we do need to make sure that we make any child widgets which originate
 in the wikitext.
 For a good example of creating child widgets programmatically I recommend
 taking a look at the 'execute' function of the <$edit....> widget of the tiddler:
 $:/core/modules/widgets/edit.js at the core of Tiddlywiki.
\end_layout

\begin_layout Subsubsection*
Create
\end_layout

\begin_layout Standard
The create function is invoked by the render function.
 It's job is to create the actual DOM nodes forming the rendering of the
 widget.
 It is really that simple.
\end_layout

\begin_layout Standard
There are a couple of TiddlyWiki5 core functions used in the example which
 are worth noting for future use:
\end_layout

\begin_layout Paragraph*
$tw.utils.domMaker
\end_layout

\begin_layout Standard
This utility function is provided in the core to help to create DOM nodes
 with a "class" attached.
 You have a choice of doing this in one line with domMaker:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var domNode = $tw.utils.domMaker("div",{class:this.selectClass});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Or you can do the same with two lines using plain old DOM manipulation,
 which would look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var domNode = this.document.createElement("div");
\end_layout

\begin_layout Plain Layout

domNode.className = this.selectClass;
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
$tw.utils.addEventListeners
\end_layout

\begin_layout Standard
This utility function registers event handler functions to DOM objects.
 In the <$select....> widget we add an event handler to the Dom <select> entity
 for "change" events occurring on the widget.
 Of course we need to provide the event handler function too, and in this
 case we provide Select.prototype.handleChangeEvent(event).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$tw.utils.addEventListeners(select,[
\end_layout

\begin_layout Plain Layout

{name: "change", handlerObject: this, handlerMethod: "handleChangeEvent"}
\end_layout

\begin_layout Plain Layout

]);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Widget.prototype.setVariable and Widget.prototype.getVariable
\end_layout

\begin_layout Standard
this.setVariable and this.getVariable are the function invocations used to
 set and get widget variables accessible downstream by child widgets and
 macros.
 By "setting" a variable with setVariable, any child widget can access that
 variable directly via getVariable.
 The widget mechanism does the work of searching back up the widget tree
 for the nearest, corresponding, setVariable.
\end_layout

\begin_layout Subsubsection*
Refresh
\end_layout

\begin_layout Standard
The refresh function is invoked either externally, typically by the widget's
 parent widget by invoking refreshChildren.
 For the <$select....> widget we do a refresh if and only if the driving attributes
 have changed.
 In that case we invoke the standard widget refreshSelf function, which
 removes child DOM nodes of this widget and then re-renders the widget,
 this time according to the new attributes.
\end_layout

\begin_layout Standard
If none of the attributes has changed then all we do here is invoke refreshChild
ren in case any of the child widgets need or want to do a refresh based
 on changed tiddlers or changed attributes etc.
\end_layout

\begin_layout Subsubsection*
RemoveChildDomNodes
\end_layout

\begin_layout Standard
The removeChildDomNodes function is invoked by refreshSelf to remove the
 DOM nodes which we added to the domNodes array which we built during render.
 Typically all of the DOM nodes created by a widget are children of a single
 root DOM node, so that removeChildDomNodes is a boiler-plate copy of the
 corresponding, default Widget function.
\end_layout

\begin_layout Subsection
Code of the $select widget
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML,basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

/*
\backslash

\end_layout

\begin_layout Plain Layout

title: $:/core/modules/widgets/selectWidget.js
\end_layout

\begin_layout Plain Layout

type: application/javascript
\end_layout

\begin_layout Plain Layout

module-type: widget
\end_layout

\begin_layout Plain Layout

Implements the <$select widget - to render a <select> dom element containing
 an <option> dom element
\end_layout

\begin_layout Plain Layout

for each item in an option list.
 The option list is generated from a filter expression, or a list 
\end_layout

\begin_layout Plain Layout

tiddler, or a plain text tiddler.
 The current selection is stored in a widget variable accessible 
\end_layout

\begin_layout Plain Layout

by the child widgets or via template insertion to the any enclosed text
 and/or child widgets.
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout

<$select filter="...." list="...." tiddler="...." name="...."/>
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout


\backslash
*/
\end_layout

\begin_layout Plain Layout

(function(){
\end_layout

\begin_layout Plain Layout

/*jslint node: true, browser: true */
\end_layout

\begin_layout Plain Layout

/*global $tw: false */
\end_layout

\begin_layout Plain Layout

"use strict";
\end_layout

\begin_layout Plain Layout

var Widget = require("$:/core/modules/widgets/widget.js").widget;
\end_layout

\begin_layout Plain Layout

var SelectWidget = function(parseTreeNode,options) {
\end_layout

\begin_layout Plain Layout

this.initialise(parseTreeNode,options);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype = new Widget();
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.render = function(parent,nextSibling) {
\end_layout

\begin_layout Plain Layout

this.parentDomNode = parent;
\end_layout

\begin_layout Plain Layout

this.computeAttributes();
\end_layout

\begin_layout Plain Layout

this.execute();
\end_layout

\begin_layout Plain Layout

var domNode = this.create(parent,nextSibling);
\end_layout

\begin_layout Plain Layout

this.domNodes.push(domNode);
\end_layout

\begin_layout Plain Layout

parent.insertBefore(domNode,nextSibling);
\end_layout

\begin_layout Plain Layout

this.renderChildren(domNode,null);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.execute = function() {
\end_layout

\begin_layout Plain Layout

// get attributes
\end_layout

\begin_layout Plain Layout

this.filter = this.getAttribute("filter");
\end_layout

\begin_layout Plain Layout

this.list = this.getAttribute("list");
\end_layout

\begin_layout Plain Layout

this.tiddler = this.getAttribute("tiddler",this.getVariable("currentTiddler"));
\end_layout

\begin_layout Plain Layout

this.selectClass = this.getAttribute("class");
\end_layout

\begin_layout Plain Layout

this.setName = this.getAttribute("name","currentTiddler");
\end_layout

\begin_layout Plain Layout

// make child widgets 
\end_layout

\begin_layout Plain Layout

this.makeChildWidgets();
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

Selectively refreshes the widget if needed.
 Returns true if the widget or any of its children needed re-rendering
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.refresh = function(changedTiddlers) {
\end_layout

\begin_layout Plain Layout

var changedAttributes = this.computeAttributes();
\end_layout

\begin_layout Plain Layout

if(changedAttributes.filter || changedAttributes.list || changedAttributes.tiddler)
 {
\end_layout

\begin_layout Plain Layout

this.refreshSelf();
\end_layout

\begin_layout Plain Layout

return true;
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

return this.refreshChildren(changedTiddlers); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.removeChildDomNodes = function() {
\end_layout

\begin_layout Plain Layout

$tw.utils.each(this.domNodes,function(domNode) {
\end_layout

\begin_layout Plain Layout

domNode.parentNode.removeChild(domNode);
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

this.domNodes = [];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.create = function() {
\end_layout

\begin_layout Plain Layout

// create a <div> container for the <select>
\end_layout

\begin_layout Plain Layout

var domNode = $tw.utils.domMaker("div",{class:this.selectClass});
\end_layout

\begin_layout Plain Layout

// create the <select> element
\end_layout

\begin_layout Plain Layout

var select = this.document.createElement("select");
\end_layout

\begin_layout Plain Layout

select.className = this.selectClass;
\end_layout

\begin_layout Plain Layout

// get the list of select options
\end_layout

\begin_layout Plain Layout

var optionList = this.getOptionList();
\end_layout

\begin_layout Plain Layout

// fetch the current selection, defaulting to the first option in the option
 list
\end_layout

\begin_layout Plain Layout

var selection = this.getVariable(this.setName);
\end_layout

\begin_layout Plain Layout

if(!selection)this.setVariable(this.setName,optionList[0],this.parseTreeNode.params)
;
\end_layout

\begin_layout Plain Layout

// create and add the <option> elements
\end_layout

\begin_layout Plain Layout

for (var i=0; i < optionList.length; i++) {
\end_layout

\begin_layout Plain Layout

var option = this.document.createElement("option");
\end_layout

\begin_layout Plain Layout

if(selection && selection === optionList[i]) {
\end_layout

\begin_layout Plain Layout

option.setAttribute("selected","true");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

option.appendChild(this.document.createTextNode(optionList[i]));
\end_layout

\begin_layout Plain Layout

select.appendChild(option);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

// add a selection handler
\end_layout

\begin_layout Plain Layout

$tw.utils.addEventListeners(select,[
\end_layout

\begin_layout Plain Layout

{name: "change", handlerObject: this, handlerMethod: "handleChangeEvent"}
\end_layout

\begin_layout Plain Layout

]);
\end_layout

\begin_layout Plain Layout

// insert the <select> into the enclosing domNode
\end_layout

\begin_layout Plain Layout

domNode.appendChild(select);
\end_layout

\begin_layout Plain Layout

return domNode;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.getOptionList = function() {
\end_layout

\begin_layout Plain Layout

var optionList = [];
\end_layout

\begin_layout Plain Layout

if(this.filter) {
\end_layout

\begin_layout Plain Layout

// process the filter into an array of tiddler titles
\end_layout

\begin_layout Plain Layout

var defaultFilter = "[!is[system]sort[title]]";
\end_layout

\begin_layout Plain Layout

optionList = this.wiki.filterTiddlers(this.getAttribute("filter",defaultFilter),thi
s.getVariable("currentTiddler"));
\end_layout

\begin_layout Plain Layout

} else if(this.list) {
\end_layout

\begin_layout Plain Layout

// parse the given list into an array
\end_layout

\begin_layout Plain Layout

optionList = $tw.utils.parseStringArray(this.list);
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

// process either the given, or the current tiddler as a list tiddler
\end_layout

\begin_layout Plain Layout

optionList = this.wiki.getTiddlerList(this.tiddler,[]);
\end_layout

\begin_layout Plain Layout

if(optionList.length === 0){
\end_layout

\begin_layout Plain Layout

// process the tiddler text as a list
\end_layout

\begin_layout Plain Layout

optionList = this.wiki.getTiddlerText(this.tiddler).split("
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

return optionList ? optionList : [];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

SelectWidget.prototype.handleChangeEvent = function(event) {
\end_layout

\begin_layout Plain Layout

// set the widget variable to inform the children
\end_layout

\begin_layout Plain Layout

this.setVariable(this.setName,event.target.value,this.parseTreeNode.params);
\end_layout

\begin_layout Plain Layout

// refresh this widget, and thereby the child widgets AND the enclosed content
 of this widget 
\end_layout

\begin_layout Plain Layout

this.refreshSelf();
\end_layout

\begin_layout Plain Layout

return true;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

exports.select = SelectWidget;
\end_layout

\begin_layout Plain Layout

})();
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
The scrippting business
\end_layout

\begin_layout Standard
Pieces of code.
\end_layout

\begin_layout Section
List scrippting
\end_layout

\begin_layout Standard
Lists, nested lists, actions and buttons inside lists...
\end_layout

\begin_layout Section
Interface scripting
\end_layout

\begin_layout Standard
How to use buttons, edittext, radiobuttons, checkboxes...
\end_layout

\begin_layout Section
Data tiddlers scripting
\end_layout

\begin_layout Standard
How to use data tiddlers.
\end_layout

\begin_layout Section
Template scripting
\end_layout

\begin_layout Standard
Revealing sections of tiddlywiki, state tiddlers...
\end_layout

\begin_layout Section
Tiddlers scripting
\end_layout

\begin_layout Standard
Creating, removing and editing tiddlers with code, navigating with code...
\end_layout

\begin_layout Chapter
Recipe book
\end_layout

\begin_layout Standard
In this section we will show master code pieces to various situations.
 Personal wikis with many uses.
\end_layout

\begin_layout Standard
Maybe the sections will be:
\end_layout

\begin_layout Section
Personal todo-list
\end_layout

\begin_layout Section
Writting stories
\end_layout

\begin_layout Section
Image gallery
\end_layout

\begin_layout Section
Lesson planner
\end_layout

\begin_layout Section
Simple game
\end_layout

\begin_layout Chapter
Languages
\end_layout

\begin_layout Section
Tiddlywiki languages
\end_layout

\begin_layout Section
Writing international wikis
\end_layout

\begin_layout Chapter
Plugins
\end_layout

\begin_layout Section
Extending tiddlywiki functionality
\end_layout

\begin_layout Section
Creating plugins
\end_layout

\begin_layout Section
Where we can find plugins
\end_layout

\begin_layout Chapter
The people.
 The project
\end_layout

\begin_layout Standard
I want to add a chapter with all the people under this project.
 From Jeremy though the core developers to the wiki writers.
\end_layout

\begin_layout Standard
And the project, its philosophy and the future of tiddlywiki.
\end_layout

\begin_layout Chapter
Glossary
\end_layout

\begin_layout Description
\begin_inset CommandInset label
LatexCommand label
name "gls:Parser"

\end_inset

Parser.
 A Parser is provided by a module with module-type: parser and is responsible
 to transform block of text to a parse-tree.
 The core plug-in provides a recursive descent WikiText parser which loads
 it's individual rules from individual modules.
 Thus a developer can provide additional rules by using module-type: wikirule.
 Each rule can produce a list of parse-tree nodes.
 A simple example for a wikirule producing a <hr> from --- can be found
 in horizrule.js
\end_layout

\begin_layout Description
Pragma: A pragma is a special component of WikiText that provides control
 over the way the remaining text is parsed.
\end_layout

\begin_layout Description
Story
\begin_inset space ~
\end_inset

river: Zone of the Tiddlywiki page for showing the tiddlers
\end_layout

\begin_layout Description
Tiddler: Little notes that integrate Tiddlywiki
\end_layout

\begin_layout Description
Tags: Words to classify the tiddlers
\end_layout

\begin_layout Chapter
Resources
\end_layout

\begin_layout Itemize
Tiddlywiki for developers, Jeremy Ruston.
 
\begin_inset CommandInset href
LatexCommand href
name "Tiddlywiki for developers"
target "https://tiddlywiki.com/dev/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize
The 
\begin_inset CommandInset href
LatexCommand href
name "Playground"
target "http://tongerner.tiddlyspot.com/"
literal "false"

\end_inset

, by Ton Gerner.
\end_layout

\begin_layout Itemize
RegExp in Tiddywiki, by Mohammad Rahmani.
 
\begin_inset CommandInset href
LatexCommand href
target "http://tw-regexp.tiddlyspot.com/"

\end_inset


\end_layout

\begin_layout Itemize
Tidldywiki coding , by Chris Hunt.
 
\begin_inset CommandInset href
LatexCommand href
name "Tiddlywiki coding notes"
target "https://web.archive.org/web/20190413130519/http://cjhunt.github.io/"
literal "false"

\end_inset

.
 The link of the first version
\end_layout

\end_body
\end_document
